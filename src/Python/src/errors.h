/*
 * This file was generated by the program errorParser
 * using the input file photon.xml.
 * Date: Fri Dec 19 12:47:25 2008.
 *
 * The version of this interface is 0.4.
 *
 * Copyright (C) 2006-2008 Daniel Prevost
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 or version 3 as published by
 * the Free Software Foundation and appearing in the file
 * COPYING.GPL2 and COPYING.GPL3 included in the packaging of this
 * software.
 *
 * Licensees holding a valid Photon Commercial license can use this
 * file in accordance with the terms of their license.
 *
 * This software is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

#ifndef JUNK_H
#define JUNK_H

#ifdef __cplusplus
extern "C" {
#endif

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

#include "Python.h"

PyObject * AddErrors(void)
{
    PyObject * errors = NULL, * errorNames = NULL, * value = NULL, * key = NULL;
    int errcode;

    errors = PyDict_New();
    if ( errors == NULL ) return NULL;

    errorNames = PyDict_New();
    if ( errorNames == NULL ) {
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 0 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "OK" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 666 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INTERNAL_ERROR" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 1 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "ENGINE_BUSY" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 2 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "NOT_ENOUGH_PSO_MEMORY" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 3 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "NOT_ENOUGH_HEAP_MEMORY" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 4 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "NOT_ENOUGH_RESOURCES" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 5 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "WRONG_TYPE_HANDLE" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 6 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "NULL_HANDLE" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 7 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "NULL_POINTER" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 8 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_LENGTH" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 21 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "PROCESS_ALREADY_INITIALIZED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 22 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "PROCESS_NOT_INITIALIZED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 23 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_QUASAR_ADDRESS" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 24 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INCOMPATIBLE_VERSIONS" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 25 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "SOCKET_ERROR" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 26 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "CONNECT_ERROR" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 27 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "SEND_ERROR" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 28 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "RECEIVE_ERROR" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 29 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "BACKSTORE_FILE_MISSING" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 30 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "ERROR_OPENING_MEMORY" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 41 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "LOGFILE_ERROR" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 42 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "SESSION_CANNOT_GET_LOCK" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 43 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "SESSION_IS_TERMINATED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 51 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_OBJECT_NAME" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 52 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "NO_SUCH_OBJECT" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 53 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "NO_SUCH_FOLDER" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 54 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "OBJECT_ALREADY_PRESENT" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 55 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "IS_EMPTY" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 56 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "WRONG_OBJECT_TYPE" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 57 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "OBJECT_CANNOT_GET_LOCK" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 58 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "REACHED_THE_END" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 59 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_ITERATOR" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 60 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "OBJECT_NAME_TOO_LONG" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 61 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "FOLDER_IS_NOT_EMPTY" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 62 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "ITEM_ALREADY_PRESENT" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 63 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "NO_SUCH_ITEM" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 64 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "OBJECT_IS_DELETED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 65 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "OBJECT_NOT_INITIALIZED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 66 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "ITEM_IS_IN_USE" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 67 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "ITEM_IS_DELETED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 69 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "OBJECT_IS_IN_USE" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 70 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "OBJECT_IS_READ_ONLY" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 71 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "NOT_ALL_EDIT_ARE_CLOSED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 72 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "A_SINGLE_UPDATER_IS_ALLOWED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 73 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "ALREADY_OPEN" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 101 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_NUM_FIELDS" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 102 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_FIELD_TYPE" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 103 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_FIELD_LENGTH_INT" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 104 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_FIELD_LENGTH" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 105 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_FIELD_NAME" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 106 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "DUPLICATE_FIELD_NAME" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 107 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_PRECISION" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 108 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_SCALE" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 109 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "INVALID_KEY_DEF" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 201 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "XML_READ_ERROR" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 202 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "XML_INVALID_ROOT" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 203 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "XML_NO_SCHEMA_LOCATION" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 204 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "XML_PARSER_CONTEXT_FAILED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 205 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "XML_PARSE_SCHEMA_FAILED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 206 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "XML_VALID_CONTEXT_FAILED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 207 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "XML_VALIDATION_FAILED" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    value = PyInt_FromLong( 601 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    key = PyString_FromString( "SEM_DESTROY_ERROR" );
    if ( key == NULL ) {
        Py_DECREF(value);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errors, key, value );
    if (errcode != 0) {
        Py_DECREF(value);
        Py_DECREF(key);
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }
    errcode = PyDict_SetItem( errorNames, value, key );
    Py_DECREF(value);
    Py_DECREF(key);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        PyDict_Clear( errorNames );
        Py_DECREF(errorNames);
        return NULL;
    }

    return Py_BuildValue("OO", errors, errorNames);
}

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

#ifdef __cplusplus
}
#endif

#endif /* JUNK_H */

