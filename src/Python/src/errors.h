/*
 * This file was generated by the program errorParser
 * using the input file photon.xml.
 * Date: Wed Dec 17 22:45:54 2008.
 *
 * The version of this interface is 0.4.
 *
 * Copyright (C) 2006-2008 Daniel Prevost
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 or version 3 as published by
 * the Free Software Foundation and appearing in the file
 * COPYING.GPL2 and COPYING.GPL3 included in the packaging of this
 * software.
 *
 * Licensees holding a valid Photon Commercial license can use this
 * file in accordance with the terms of their license.
 *
 * This software is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

#ifndef QQQ_H
#define QQQ_H

#ifdef __cplusplus
extern "C" {
#endif

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

#include "Python.h"

PyObject * AddErrors(void)
{
    PyObject * errors = NULL, * value = NULL;
    int errcode;

    errors = PyDict_New();
    if ( errors == NULL ) return NULL;

    value = PyInt_FromLong( 0 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "OK", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 666 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INTERNAL_ERROR", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 1 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "ENGINE_BUSY", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 2 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "NOT_ENOUGH_PSO_MEMORY", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 3 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "NOT_ENOUGH_HEAP_MEMORY", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 4 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "NOT_ENOUGH_RESOURCES", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 5 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "WRONG_TYPE_HANDLE", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 6 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "NULL_HANDLE", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 7 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "NULL_POINTER", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 8 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_LENGTH", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 21 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "PROCESS_ALREADY_INITIALIZED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 22 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "PROCESS_NOT_INITIALIZED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 23 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_QUASAR_ADDRESS", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 24 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INCOMPATIBLE_VERSIONS", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 25 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "SOCKET_ERROR", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 26 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "CONNECT_ERROR", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 27 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "SEND_ERROR", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 28 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "RECEIVE_ERROR", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 29 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "BACKSTORE_FILE_MISSING", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 30 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "ERROR_OPENING_MEMORY", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 41 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "LOGFILE_ERROR", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 42 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "SESSION_CANNOT_GET_LOCK", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 43 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "SESSION_IS_TERMINATED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 51 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_OBJECT_NAME", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 52 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "NO_SUCH_OBJECT", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 53 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "NO_SUCH_FOLDER", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 54 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "OBJECT_ALREADY_PRESENT", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 55 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "IS_EMPTY", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 56 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "WRONG_OBJECT_TYPE", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 57 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "OBJECT_CANNOT_GET_LOCK", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 58 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "REACHED_THE_END", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 59 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_ITERATOR", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 60 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "OBJECT_NAME_TOO_LONG", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 61 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "FOLDER_IS_NOT_EMPTY", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 62 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "ITEM_ALREADY_PRESENT", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 63 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "NO_SUCH_ITEM", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 64 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "OBJECT_IS_DELETED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 65 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "OBJECT_NOT_INITIALIZED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 66 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "ITEM_IS_IN_USE", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 67 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "ITEM_IS_DELETED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 69 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "OBJECT_IS_IN_USE", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 70 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "OBJECT_IS_READ_ONLY", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 71 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "NOT_ALL_EDIT_ARE_CLOSED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 72 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "A_SINGLE_UPDATER_IS_ALLOWED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 73 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "ALREADY_OPEN", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 101 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_NUM_FIELDS", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 102 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_FIELD_TYPE", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 103 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_FIELD_LENGTH_INT", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 104 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_FIELD_LENGTH", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 105 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_FIELD_NAME", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 106 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "DUPLICATE_FIELD_NAME", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 107 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_PRECISION", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 108 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_SCALE", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 109 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "INVALID_KEY_DEF", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 201 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "XML_READ_ERROR", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 202 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "XML_INVALID_ROOT", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 203 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "XML_NO_SCHEMA_LOCATION", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 204 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "XML_PARSER_CONTEXT_FAILED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 205 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "XML_PARSE_SCHEMA_FAILED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 206 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "XML_VALID_CONTEXT_FAILED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 207 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "XML_VALIDATION_FAILED", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    value = PyInt_FromLong( 601 );
    if ( value == NULL ) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }
    errcode = PyDict_SetItemString( errors, "SEM_DESTROY_ERROR", value);
    Py_DECREF(value);
    if (errcode != 0) {
        PyDict_Clear( errors );
        Py_DECREF(errors);
        return NULL;
    }

    return errors;
}

/* --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+-- */

#ifdef __cplusplus
}
#endif

#endif /* QQQ_H */

