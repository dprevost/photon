<?xml version="1.0"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
targetNamespace="http://photonsoftware.org/photon_meta"
xmlns="http://photonsoftware.org/photon_meta"
elementFormDefault="qualified">

<!-- Copyright (C) 2008-2009 Daniel Prevost <dprevost@photonsoftware.org>

     This file is part of Photon (photonsoftware.org).

     This file may be distributed and/or modified under the terms of the
     GNU General Public License version 2 or version 3 as published by the 
     Free Software Foundation and appearing in the file COPYING.GPL2 and 
     COPYING.GPL3 included in the packaging of this software.

     Licensees holding a valid Photon Commercial license can use this file 
     in accordance with the terms of their license.

     This software is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
-->

<!-- Define our simple types first -->

<!-- A type of string that can be used to build c/c++ structs: must starts
     with a letter, limited to ASCII alphanumerics or '_'.
     
     The C99 standard allows for more than this (part of unicode defined
     in ISO 10646) but not all compilers implement it yet,for example VS2008:
     http://msdn.microsoft.com/en-us/library/565w213d.aspx.
     Furthermore, it might make a program less portable, so...). -->
<xs:simpleType name="cStringType">
  <xs:restriction base="xs:string">
    <xs:pattern value="[A-Za-z][A-Za-z0-9_]+"/>  
    <xs:whiteSpace value="collapse"/>
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="integerTypeAttr">
  <xs:restriction base="xs:integer">
    <xs:pattern value="1|2|4|8"/>
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="lengthTypeAttr">
  <xs:restriction base="xs:positiveInteger">
    <xs:maxInclusive value="4294967295"/>
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="varLengthTypeAttr">
  <xs:restriction base="xs:nonNegativeInteger">
    <xs:maxInclusive value="4294967295"/>
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="precisionTypeAttr">
  <xs:restriction base="xs:positiveInteger">
    <xs:maxInclusive value="30"/>
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="scaleTypeAttr">
  <xs:restriction base="xs:nonNegativeInteger">
    <xs:maxInclusive value="30"/>
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="objString">
  <xs:restriction base="cStringType">
    <xs:maxLength value="63"/>
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="fieldNameType">
  <xs:restriction base="cStringType">
    <xs:maxLength value="31"/>
  </xs:restriction>
</xs:simpleType>

<xs:simpleType name="objectAccessMode">
  <xs:restriction base="xs:string">
    <xs:enumeration value="dynamic"/>
    <xs:enumeration value="static"/>
  </xs:restriction>
</xs:simpleType>

<!-- Definition of complex types starts here -->

<xs:complexType name="integerType">
  <xs:attribute name="size" type="integerTypeAttr" use="required"/>
</xs:complexType>

<xs:complexType name="decimalType">
  <xs:attribute name="precision" type="precisionTypeAttr" use="required"/>
  <xs:attribute name="scale"     type="scaleTypeAttr" default="0"/>
</xs:complexType>

<xs:complexType name="stringType">
  <xs:attribute name="length" type="lengthTypeAttr" use="required"/>
</xs:complexType>

<xs:complexType name="binaryType">
  <xs:attribute name="length" type="lengthTypeAttr" use="required"/>
</xs:complexType>

<!-- For the next two types, when the attribute "maxLength" is set to zero,
     it indicates that there is no limits to the string or binary data up
     to 4 Gigabytes
     (other than the usual constraints of the shared memory, the computer 
     itself, etc.). This is the default.
     
     [I could have used -1 instead but that would allow zero to 
     be accepted and a maximum length of zero is non sense.] -->

<xs:complexType name="varBinaryType">
  <xs:attribute name="minLength" type="varLengthTypeAttr" default="0"/>
  <xs:attribute name="maxLength" type="varLengthTypeAttr" default="0"/>
</xs:complexType>

<xs:complexType name="varStringType">
  <xs:attribute name="minLength" type="varLengthTypeAttr" default="0"/>
  <xs:attribute name="maxLength" type="varLengthTypeAttr" default="0"/>
</xs:complexType>

<xs:complexType name="fieldType">
  <xs:choice>
    <xs:element name="integer" type="integerType"/>
    <xs:element name="string"  type="stringType"/>
    <xs:element name="binary"  type="binaryType"/>
    <xs:element name="boolean"/>
    <xs:element name="decimal" type="decimalType"/>
  </xs:choice>
  <xs:attribute name="name" type="fieldNameType" use="required"/>
</xs:complexType>

<xs:complexType name="lastFieldType">
  <xs:choice>
    <xs:element name="integer"   type="integerType"/>
    <xs:element name="string"    type="stringType"/>
    <xs:element name="binary"    type="binaryType"/>
    <xs:element name="varString" type="varStringType"/>
    <xs:element name="varBinary" type="varBinaryType"/>
    <xs:element name="boolean"/>
    <xs:element name="decimal" type="decimalType"/>
  </xs:choice>
  <xs:attribute name="name" type="fieldNameType" use="required"/>
</xs:complexType>

<xs:complexType name="keyType">
  <xs:choice>
    <xs:element name="integer"   type="integerType"/>
    <xs:element name="string"    type="stringType"/>
    <xs:element name="binary"    type="binaryType"/>
    <xs:element name="varString" type="varStringType"/>
    <xs:element name="varBinary" type="varBinaryType"/>
  </xs:choice>
</xs:complexType>

<!-- Definitions of our elements -->

<xs:element name="field" type="fieldType" />
<xs:element name="lastField" type="lastFieldType" />
<xs:element name="key" type="keyType" />

<xs:complexType name="queueType">
  <xs:sequence>
    <xs:element ref="field" minOccurs="0" maxOccurs="65534"/>
    <xs:element ref="lastField" minOccurs="1" maxOccurs="1"/>
  </xs:sequence>
  <xs:attribute name="objName" type="objString" use="required"/>
</xs:complexType>

<xs:element name="queue" type="queueType">
  <xs:unique name="queueUnique">
    <xs:selector xpath="*"/>
    <xs:field xpath="@name"/>
  </xs:unique>
</xs:element>

<xs:element name="lifo" type="queueType">
  <xs:unique name="lifoUnique">
    <xs:selector xpath="*"/>
    <xs:field xpath="@name"/>
  </xs:unique>
</xs:element>

<xs:complexType name="hashmapType">
  <xs:sequence>
    <xs:element ref="key"   minOccurs="1" maxOccurs="1"/>
    <xs:element ref="field" minOccurs="0" maxOccurs="65534"/>
    <xs:element ref="lastField" minOccurs="1" maxOccurs="1"/>
  </xs:sequence>
  <xs:attribute name="objName" type="objString" use="required"/>
  <xs:attribute name="mode" type="objectAccessMode" use="required"/>

</xs:complexType>

<xs:element name="hashmap" type="hashmapType">
  <xs:unique name="hashUnique">
    <xs:selector xpath="*"/>
    <xs:field xpath="@name"/>
  </xs:unique>
</xs:element>

<xs:complexType name="folderType">
  <xs:sequence>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="folder"/>
      <xs:element ref="queue"/>
      <xs:element ref="hashmap"/>
    </xs:choice>
  </xs:sequence>
  <xs:attribute name="objName" type="objString" use="required"/>
</xs:complexType>

<xs:element name="folder">
  <xs:unique name="folderUnique">
    <xs:selector xpath="*"/>
    <xs:field xpath="@objName"/>
  </xs:unique>
</xs:element>

<xs:complexType name="topFolderType">
  <xs:sequence>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="folder"/>
      <xs:element ref="queue"/>
      <xs:element ref="lifo"/>
      <xs:element ref="hashmap"/>
    </xs:choice>
  </xs:sequence>
</xs:complexType>

<xs:element name="photon" type="topFolderType">
  <xs:unique name="topFolderUnique">
    <xs:selector xpath="*"/>
    <xs:field xpath="@objName"/>
  </xs:unique>
</xs:element>

</xs:schema>
