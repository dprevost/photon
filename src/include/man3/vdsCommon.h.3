.TH "vdsCommon.h" 3 "3 Nov 2007" "Version 0.1" "vdsf C API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vdsCommon.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBvdsFolderEntry\fP"
.br
.ti -1c
.RI "struct \fBvdsObjStatus\fP"
.br
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBVDSF_EXPORT\fP"
.br
.ti -1c
.RI "#define \fBVDS_MAX_NAME_LENGTH\fP   256"
.br
.RI "\fIMaximum number of characters (or bytes if not supporting i18n) of the name of a vds object (not counting the name of the parent folder(s)). \fP"
.ti -1c
.RI "#define \fBVDS_MAX_FULL_NAME_LENGTH\fP   1024"
.br
.RI "\fIMaximum number of characters (or bytes if not supporting i18n) of the fully qualified name of a vds object (including the name(s) of its parent folder(s)). \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void * \fBVDS_HANDLE\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBvdsObjectType\fP { \fBVDS_FOLDER\fP =  1, \fBVDS_QUEUE\fP =  2, \fBVDS_HASH_MAP\fP =  3, \fBVDS_LAST_OBJECT_TYPE\fP }"
.br
.ti -1c
.RI "enum \fBvdsIteratorType\fP { \fBVDS_FIRST\fP =  1, \fBVDS_NEXT\fP =  2 }"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define VDS_MAX_FULL_NAME_LENGTH   1024"
.PP
Maximum number of characters (or bytes if not supporting i18n) of the fully qualified name of a vds object (including the name(s) of its parent folder(s)). 
.PP
If the software was compiled with i18n, this maximum is the number of wide characters (4 bytes). Otherwise it is the number of bytes (which should equal the number of characters unless something funny is going on like using UTF-8 as locale and using ---disable-i18n with configure...).
.PP
Note: setting this value eliminates a possible loophole since some heap memory must be allocated to hold the wide characters string for the duration of the operation (open, close, create or destroy). 
.PP
Definition at line 75 of file vdsCommon.h.
.SS "#define VDS_MAX_NAME_LENGTH   256"
.PP
Maximum number of characters (or bytes if not supporting i18n) of the name of a vds object (not counting the name of the parent folder(s)). 
.PP
If the software was compiled with i18n, this maximum is the number of wide characters (4 bytes). Otherwise it is the number of bytes (which should equal the number of characters unless something funny is going on like using UTF-8 as locale and using ---disable-i18n with configure...). 
.PP
Definition at line 58 of file vdsCommon.h.
.SS "#define VDSF_EXPORT"
.PP
Definition at line 32 of file vdsCommon.h.
.SH "Typedef Documentation"
.PP 
.SS "typedef void* \fBVDS_HANDLE\fP"
.PP
Definition at line 43 of file vdsCommon.h.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBvdsIteratorType\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIVDS_FIRST \fP\fP
.TP
\fB\fIVDS_NEXT \fP\fP

.PP
Definition at line 87 of file vdsCommon.h.
.SS "enum \fBvdsObjectType\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIVDS_FOLDER \fP\fP
.TP
\fB\fIVDS_QUEUE \fP\fP
.TP
\fB\fIVDS_HASH_MAP \fP\fP
.TP
\fB\fIVDS_LAST_OBJECT_TYPE \fP\fP

.PP
Definition at line 79 of file vdsCommon.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for vdsf C API from the source code.
