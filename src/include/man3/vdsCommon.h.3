.TH "vdsCommon.h" 3 "18 Aug 2008" "Version 0.3.0" "vdsf C API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
vdsCommon.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBpsoKeyDefinition\fP"
.br
.RI "\fIDescription of the structure of the hash map key. \fP"
.ti -1c
.RI "struct \fBvdsFieldDefinition\fP"
.br
.RI "\fIDescription of the structure of the data (if any). \fP"
.ti -1c
.RI "struct \fBpsoObjectDefinition\fP"
.br
.RI "\fIThis struct has a variable length. \fP"
.ti -1c
.RI "struct \fBpsoFolderEntry\fP"
.br
.RI "\fIThis data structure is used to iterate throught all objects in a folder. \fP"
.ti -1c
.RI "struct \fBpsoObjStatus\fP"
.br
.RI "\fIThis data structure is used to retrieve the status of objects. \fP"
.ti -1c
.RI "struct \fBpsoInfo\fP"
.br
.RI "\fIThis data structure is used to retrieve the status of the virtual data space. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBVDSF_EXPORT\fP"
.br
.RI "\fIUses to tell the VC++ compiler to export/import a function or variable on Windows (the macro is empty on other platforms). \fP"
.ti -1c
.RI "#define \fBVDS_MAX_NAME_LENGTH\fP   256"
.br
.RI "\fIMaximum number of bytes of the name of a vds object (not counting the name of the parent folder(s)). \fP"
.ti -1c
.RI "#define \fBVDS_MAX_FULL_NAME_LENGTH\fP   1024"
.br
.RI "\fIMaximum number of bytes of the fully qualified name of a vds object (including the name(s) of its parent folder(s)). \fP"
.ti -1c
.RI "#define \fBVDS_MAX_FIELD_LENGTH\fP   32"
.br
.RI "\fIMaximum number of bytes of the name of a field of a vds object. \fP"
.ti -1c
.RI "#define \fBVDS_MAX_FIELDS\fP   65535"
.br
.RI "\fIMaximum number of fields (including the last one). \fP"
.ti -1c
.RI "#define \fBVDS_FIELD_MAX_PRECISION\fP   30"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void * \fBPSO_HANDLE\fP"
.br
.RI "\fIPSO_HANDLE is an opaque data type used by the C API to reference objects created in the API module. \fP"
.ti -1c
.RI "typedef enum \fBpsoObjectType\fP \fBpsoObjectType\fP"
.br
.ti -1c
.RI "typedef enum \fBvdsIteratorType\fP \fBvdsIteratorType\fP"
.br
.ti -1c
.RI "typedef \fBpsoKeyDefinition\fP \fBpsoKeyDefinition\fP"
.br
.ti -1c
.RI "typedef \fBvdsFieldDefinition\fP \fBvdsFieldDefinition\fP"
.br
.ti -1c
.RI "typedef \fBpsoObjectDefinition\fP \fBpsoObjectDefinition\fP"
.br
.ti -1c
.RI "typedef \fBpsoFolderEntry\fP \fBpsoFolderEntry\fP"
.br
.ti -1c
.RI "typedef \fBpsoObjStatus\fP \fBpsoObjStatus\fP"
.br
.ti -1c
.RI "typedef \fBpsoInfo\fP \fBpsoInfo\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBpsoObjectType\fP { \fBVDS_FOLDER\fP =  1, \fBVDS_HASH_MAP\fP =  2, \fBVDS_LIFO\fP =  3, \fBVDS_FAST_MAP\fP =  4, \fBVDS_QUEUE\fP =  5, \fBVDS_LAST_OBJECT_TYPE\fP }"
.br
.RI "\fIThe object type as seen from the API. \fP"
.ti -1c
.RI "enum \fBvdsIteratorType\fP { \fBVDS_FIRST\fP =  1, \fBVDS_NEXT\fP =  2 }"
.br
.ti -1c
.RI "enum \fBpsoFieldType\fP { \fBVDS_INTEGER\fP =  1, \fBVDS_BINARY\fP, \fBVDS_STRING\fP, \fBVDS_DECIMAL\fP, \fBVDS_BOOLEAN\fP, \fBVDS_VAR_BINARY\fP, \fBVDS_VAR_STRING\fP }"
.br
.RI "\fIVDSF supported data types. \fP"
.ti -1c
.RI "enum \fBvdsKeyType\fP { \fBVDS_KEY_INTEGER\fP =  101, \fBVDS_KEY_BINARY\fP, \fBVDS_KEY_STRING\fP, \fBVDS_KEY_VAR_BINARY\fP, \fBVDS_KEY_VAR_STRING\fP }"
.br
.RI "\fIVDSF supported data types for keys. \fP"
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define VDS_FIELD_MAX_PRECISION   30"
.PP
Definition at line 83 of file vdsCommon.h.
.SS "#define VDS_MAX_FIELD_LENGTH   32"
.PP
Maximum number of bytes of the name of a field of a vds object. 
.PP
Definition at line 76 of file vdsCommon.h.
.SS "#define VDS_MAX_FIELDS   65535"
.PP
Maximum number of fields (including the last one). 
.PP
Definition at line 81 of file vdsCommon.h.
.SS "#define VDS_MAX_FULL_NAME_LENGTH   1024"
.PP
Maximum number of bytes of the fully qualified name of a vds object (including the name(s) of its parent folder(s)). 
.PP
Note: setting this value eliminates a possible loophole since some heap memory must be allocated to hold the wide characters string for the duration of the operation (open, close, create or destroy). 
.PP
Definition at line 71 of file vdsCommon.h.
.SS "#define VDS_MAX_NAME_LENGTH   256"
.PP
Maximum number of bytes of the name of a vds object (not counting the name of the parent folder(s)). 
.PP
Definition at line 61 of file vdsCommon.h.
.SS "#define VDSF_EXPORT"
.PP
Uses to tell the VC++ compiler to export/import a function or variable on Windows (the macro is empty on other platforms). 
.PP
Definition at line 38 of file vdsCommon.h.
.SH "Typedef Documentation"
.PP 
.SS "typedef void* \fBPSO_HANDLE\fP"
.PP
PSO_HANDLE is an opaque data type used by the C API to reference objects created in the API module. 
.PP
Definition at line 53 of file vdsCommon.h.
.SS "typedef struct \fBvdsFieldDefinition\fP \fBvdsFieldDefinition\fP"
.PP
Definition at line 175 of file vdsCommon.h.
.SS "typedef struct \fBpsoFolderEntry\fP \fBpsoFolderEntry\fP"
.PP
Definition at line 221 of file vdsCommon.h.
.SS "typedef struct \fBpsoInfo\fP \fBpsoInfo\fP"
.PP
Definition at line 311 of file vdsCommon.h.
.SS "typedef enum \fBvdsIteratorType\fP \fBvdsIteratorType\fP"
.PP
Definition at line 108 of file vdsCommon.h.
.SS "typedef struct \fBpsoKeyDefinition\fP \fBpsoKeyDefinition\fP"
.PP
Definition at line 153 of file vdsCommon.h.
.SS "typedef struct \fBpsoObjectDefinition\fP \fBpsoObjectDefinition\fP"
.PP
Definition at line 193 of file vdsCommon.h.
.SS "typedef enum \fBpsoObjectType\fP \fBpsoObjectType\fP"
.PP
Definition at line 100 of file vdsCommon.h.
.SS "typedef struct \fBpsoObjStatus\fP \fBpsoObjStatus\fP"
.PP
Definition at line 256 of file vdsCommon.h.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBpsoFieldType\fP"
.PP
VDSF supported data types. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIVDS_INTEGER \fP\fP
.TP
\fB\fIVDS_BINARY \fP\fP
.TP
\fB\fIVDS_STRING \fP\fP
.TP
\fB\fIVDS_DECIMAL \fP\fP
.TP
\fB\fIVDS_BOOLEAN \fP\fP
.TP
\fB\fIVDS_VAR_BINARY \fP\fP
Only valid for the last field of the data definition. 
.TP
\fB\fIVDS_VAR_STRING \fP\fP
Only valid for the last field of the data definition. 
.PP
Definition at line 115 of file vdsCommon.h.
.SS "enum \fBvdsIteratorType\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIVDS_FIRST \fP\fP
.TP
\fB\fIVDS_NEXT \fP\fP

.PP
Definition at line 102 of file vdsCommon.h.
.SS "enum \fBvdsKeyType\fP"
.PP
VDSF supported data types for keys. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIVDS_KEY_INTEGER \fP\fP
.TP
\fB\fIVDS_KEY_BINARY \fP\fP
.TP
\fB\fIVDS_KEY_STRING \fP\fP
.TP
\fB\fIVDS_KEY_VAR_BINARY \fP\fP
Only valid for the last field of the data definition. 
.TP
\fB\fIVDS_KEY_VAR_STRING \fP\fP
Only valid for the last field of the data definition. 
.PP
Definition at line 131 of file vdsCommon.h.
.SS "enum \fBpsoObjectType\fP"
.PP
The object type as seen from the API. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIVDS_FOLDER \fP\fP
.TP
\fB\fIVDS_HASH_MAP \fP\fP
.TP
\fB\fIVDS_LIFO \fP\fP
.TP
\fB\fIVDS_FAST_MAP \fP\fP
.TP
\fB\fIVDS_QUEUE \fP\fP
.TP
\fB\fIVDS_LAST_OBJECT_TYPE \fP\fP

.PP
Definition at line 90 of file vdsCommon.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for vdsf C API from the source code.
