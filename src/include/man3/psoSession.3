.TH "psoSession" 3 "12 Oct 2008" "Version 0.3" "Photon C++ API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
psoSession \- 
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
Definition at line 30 of file psoSession.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBpsoSession\fP ()"
.br
.ti -1c
.RI "virtual \fB~psoSession\fP ()"
.br
.RI "\fITerminate the current session and destroy this object. \fP"
.ti -1c
.RI "void \fBCommit\fP ()"
.br
.RI "\fICommit all insertions and deletions (of the current session) executed since the previous call to Commit or Rollback. \fP"
.ti -1c
.RI "void \fBCreateObject\fP (const std::string &objectName, const psoObjectDefinition &definition)"
.br
.RI "\fICreate a new object in shared memory. \fP"
.ti -1c
.RI "void \fBCreateObject\fP (const char *objectName, size_t nameLengthInBytes, const psoObjectDefinition &definition)"
.br
.RI "\fICreate a new object in shared memory. \fP"
.ti -1c
.RI "void \fBDestroyObject\fP (const std::string &objectName)"
.br
.RI "\fIDestroy an existing object in shared memory. \fP"
.ti -1c
.RI "void \fBDestroyObject\fP (const char *objectName, size_t nameLengthInBytes)"
.br
.RI "\fIDestroy an existing object in shared memory. \fP"
.ti -1c
.RI "void \fBErrorMsg\fP (char *message, size_t msgLengthInBytes)"
.br
.RI "\fIReturn the error message associated with the last error(s). \fP"
.ti -1c
.RI "std::string & \fBErrorMsg\fP (std::string &message)"
.br
.RI "\fIReturn the error message associated with the last error(s). \fP"
.ti -1c
.RI "void \fBGetDefinition\fP (const std::string &objectName, psoObjectDefinition **definition)"
.br
.RI "\fIRetrieve the data definition of the named object. \fP"
.ti -1c
.RI "void \fBGetInfo\fP (psoInfo &info)"
.br
.RI "\fIReturn information on the current status of the shared memory. \fP"
.ti -1c
.RI "void \fBGetStatus\fP (const std::string &objectName, psoObjStatus &status)"
.br
.RI "\fIReturn the status of the named object. \fP"
.ti -1c
.RI "void \fBGetStatus\fP (const char *objectName, size_t nameLengthInBytes, psoObjStatus &status)"
.br
.RI "\fIReturn the status of the named object. \fP"
.ti -1c
.RI "void \fBInit\fP ()"
.br
.RI "\fIThis function initializes a session. \fP"
.ti -1c
.RI "int \fBLastError\fP ()"
.br
.RI "\fIReturn the last error seen in previous calls (of the current session). \fP"
.ti -1c
.RI "void \fBRollback\fP ()"
.br
.RI "\fIRollback all insertions and deletions (of the current session) executed since the previous call to Commit or Rollback. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "PSO_HANDLE \fBm_sessionHandle\fP"
.br
.RI "\fIPointer to the psoaSession struct. \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBpsoFastMap\fP"
.br
.ti -1c
.RI "class \fBpsoFolder\fP"
.br
.ti -1c
.RI "class \fBpsoHashMap\fP"
.br
.ti -1c
.RI "class \fBpsoLifo\fP"
.br
.ti -1c
.RI "class \fBpsoQueue\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "psoSession::psoSession ()"
.PP
.SS "virtual psoSession::~psoSession ()\fC [virtual]\fP"
.PP
Terminate the current session and destroy this object. 
.PP
An implicit call to Rollback is executed by this destructor. 
.SH "Member Function Documentation"
.PP 
.SS "void psoSession::Commit ()"
.PP
Commit all insertions and deletions (of the current session) executed since the previous call to Commit or Rollback. 
.PP
Insertions and deletions subjected to this call include both data items inserted and deleted from data containers (maps, etc.) and objects themselves created with CreateObject and/or destroyed with DestroyObject.
.PP
Note: the internal calls executed by the engine to satisfy this request cannot fail. As such, you cannot find yourself with an ugly situation where some operations were committed and others not. If this function thows an exception, nothing was committed.
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoSession::CreateObject (const std::string & objectName, const psoObjectDefinition & definition)"
.PP
Create a new object in shared memory. 
.PP
The creation of the object only becomes permanent after a call to Commit.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fIdefinition\fP The type of object to create (folder, queue, etc.) and the definitions (as needed).
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoSession::CreateObject (const char * objectName, size_t nameLengthInBytes, const psoObjectDefinition & definition)"
.PP
Create a new object in shared memory. 
.PP
The creation of the object only becomes permanent after a call to Commit.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator. 
.br
\fIdefinition\fP The type of object to create (folder, queue, etc.) and the definitions (as needed).
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoSession::DestroyObject (const std::string & objectName)"
.PP
Destroy an existing object in shared memory. 
.PP
The destruction of the object only becomes permanent after a call to Commit.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoSession::DestroyObject (const char * objectName, size_t nameLengthInBytes)"
.PP
Destroy an existing object in shared memory. 
.PP
The destruction of the object only becomes permanent after a call to Commit.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoSession::ErrorMsg (char * message, size_t msgLengthInBytes)"
.PP
Return the error message associated with the last error(s). 
.PP
If the length of the error message is greater than the length of the provided buffer, the error message will be truncated to fit in the provided buffer.
.PP
Caveat, some basic errors cannot be captured, if the provided handles (session handles or object handles) are incorrect (NULL, for example). Without a proper handle, the code cannot know where to store the error...
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP Buffer for the error message. Memory allocation for this buffer is the responsability of the caller. 
.br
\fImsgLengthInBytes\fP The length of \fImessage\fP (in bytes). Must be at least 32 bytes.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "std::string& psoSession::ErrorMsg (std::string & message)"
.PP
Return the error message associated with the last error(s). 
.PP
Caveat, some basic errors cannot be captured, if the provided handles (session handles or object handles) are incorrect (NULL, for example). Without a proper handle, the code cannot know where to store the error...
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP Buffer for the error message. Memory allocation for this buffer is the responsability of the caller.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoSession::GetDefinition (const std::string & objectName, psoObjectDefinition ** definition)"
.PP
Retrieve the data definition of the named object. 
.PP
\fBWarning:\fP
.RS 4
This function allocates a buffer to hold the definition (using malloc()). You must free it (with free()) when you no longer need the definition.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fIdefinition\fP The buffer allocated by the API to hold the content of the object definition. Freeing the memory (with free()) is the responsability of the caller.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoSession::GetInfo (psoInfo & info)"
.PP
Return information on the current status of the shared memory. 
.PP
The fetched information is mainly about the current status of the memory allocator.
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP A reference to the psoInfo structure.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoSession::GetStatus (const std::string & objectName, psoObjStatus & status)"
.PP
Return the status of the named object. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fIstatus\fP A reference to the psoObjStatus structure.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoSession::GetStatus (const char * objectName, size_t nameLengthInBytes, psoObjStatus & status)"
.PP
Return the status of the named object. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator. 
.br
\fIstatus\fP A reference to the psoObjStatus structure.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoSession::Init ()"
.PP
This function initializes a session. 
.PP
This function will also initiate a new transaction.
.PP
Upon normal termination, the current transaction is rolled back. You MUST explicitly call Commit to save your changes.
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "int psoSession::LastError ()"
.PP
Return the last error seen in previous calls (of the current session). 
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoSession::Rollback ()"
.PP
Rollback all insertions and deletions (of the current session) executed since the previous call to Commit or Rollback. 
.PP
Insertions and deletions subjected to this call include both data items inserted and deleted from data containers (maps, etc.) and objects themselves created with CreateObject and/or destroyed with DestroyObject.
.PP
Note: the internal calls executed by the engine to satisfy this request cannot fail. As such, you cannot find yourself with an ugly situation where some operations were rollbacked and others not. If this function thows an exception, nothing was rollbacked.
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class psoFastMap\fC [friend]\fP"
.PP
Definition at line 254 of file psoSession.
.SS "friend class psoFolder\fC [friend]\fP"
.PP
Definition at line 255 of file psoSession.
.SS "friend class psoHashMap\fC [friend]\fP"
.PP
Definition at line 256 of file psoSession.
.SS "friend class psoLifo\fC [friend]\fP"
.PP
Definition at line 257 of file psoSession.
.SS "friend class psoQueue\fC [friend]\fP"
.PP
Definition at line 258 of file psoSession.
.SH "Member Data Documentation"
.PP 
.SS "PSO_HANDLE \fBpsoSession::m_sessionHandle\fP\fC [private]\fP"
.PP
Pointer to the psoaSession struct. 
.PP
Definition at line 252 of file psoSession.

.SH "Author"
.PP 
Generated automatically by Doxygen for Photon C++ API from the source code.
