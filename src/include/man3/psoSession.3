.TH "pso::Session" 3 "23 Apr 2009" "Version 0.5.0" "Photon C++ API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
pso::Session \- 
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
Sessions exist mainly to support multi-threaded (MT) programs. 

Best practices: 
.PD 0

.IP "\(bu" 2
Each thread of an MT program should have its own session, making it independent of the other threads. 
.PP

.IP "\(bu" 2
If you need to open the same Photon object in multiple threads, simply open it multiple times using a different session for each thread. The overhead of having multiple API objects to the same shared-memory data container is minimal and using this technique instead of using multi-thread locks increases the overall performance of the software.  
.IP "\(bu" 2
If you cannot use this, you must implement your own thread synchronization mecanism.  
.IP "\(bu" 2
Signal handlers (and similar calls): you should not call the destructors of the Process or the \fBSession\fP from a signal handler. Instead, some global flags should be set that will allow each session to terminate in an orderly fashion.  
.PP
.PP
Additional note: API objects (or C handles) are just proxies for the real objects sitting in shared memory. Proper synchronization is already done in shared memory and it is best to avoid the additional synchronization of these proxy objects. 
.PP
Definition at line 75 of file Session.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSession\fP ()"
.br
.RI "\fICreates a new empty \fBSession\fP. \fP"
.ti -1c
.RI "virtual \fB~Session\fP ()"
.br
.RI "\fITerminate the current session and destroy this object. \fP"
.ti -1c
.RI "void \fBCommit\fP ()"
.br
.RI "\fICommit all insertions and deletions (of the current session) executed since the previous call to Commit or Rollback. \fP"
.ti -1c
.RI "void \fBCreateFolder\fP (const std::string &folderName)"
.br
.RI "\fICreate a new folder in shared memory. \fP"
.ti -1c
.RI "void \fBCreateObject\fP (const std::string &objectName, psoObjectDefinition &definition, DataDefinition &dataDef)"
.br
.RI "\fICreate a new object in shared memory. \fP"
.ti -1c
.RI "void \fBCreateObject\fP (const std::string &objectName, psoObjectDefinition &definition, const std::string &dataDefName)"
.br
.RI "\fICreate a new object in shared memory. \fP"
.ti -1c
.RI "void \fBCreateObject\fP (const std::string &objectName, psoObjectDefinition &definition, KeyDefinition &keyDef, DataDefinition &dataDef)"
.br
.RI "\fICreate a new object in shared memory. \fP"
.ti -1c
.RI "void \fBCreateObject\fP (const std::string &objectName, psoObjectDefinition &definition, const std::string &keyDefName, const std::string &dataDefName)"
.br
.RI "\fICreate a new object in shared memory. \fP"
.ti -1c
.RI "void \fBDestroyObject\fP (const std::string &objectName)"
.br
.RI "\fIDestroy an existing object in shared memory. \fP"
.ti -1c
.RI "std::string & \fBErrorMsg\fP (std::string &message)"
.br
.RI "\fIReturn the error message associated with the last error(s). \fP"
.ti -1c
.RI "void \fBErrorMsg\fP (char *message, psoUint32 msgLengthInBytes)"
.br
.RI "\fIReturn the error message associated with the last error(s). \fP"
.ti -1c
.RI "void \fBGetDefinition\fP (const std::string &objectName, psoObjectDefinition &definition)"
.br
.RI "\fIRetrieve the basic definition of the named object. \fP"
.ti -1c
.RI "DataDefinition * \fBGetDataDefinition\fP (const std::string &objectName)"
.br
.RI "\fIRetrieve the data definition of the named object. \fP"
.ti -1c
.RI "KeyDefinition * \fBGetKeyDefinition\fP (const std::string &objectName)"
.br
.RI "\fIRetrieve the key definition of the named object. \fP"
.ti -1c
.RI "void \fBGetInfo\fP (psoInfo &info)"
.br
.RI "\fIReturn information on the current status of the shared memory. \fP"
.ti -1c
.RI "void \fBGetStatus\fP (const std::string &objectName, psoObjStatus &status)"
.br
.RI "\fIReturn the status of the named object. \fP"
.ti -1c
.RI "void \fBInit\fP ()"
.br
.RI "\fIThis function initializes a session. \fP"
.ti -1c
.RI "int \fBLastError\fP ()"
.br
.RI "\fIReturn the last error seen in previous calls (of the current session). \fP"
.ti -1c
.RI "void \fBRollback\fP ()"
.br
.RI "\fIRollback all insertions and deletions (of the current session) executed since the previous call to Commit or Rollback. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "PSO_HANDLE \fBm_sessionHandle\fP"
.br
.RI "\fIPointer to the psoaSession struct. \fP"
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBDataDefinition\fP"
.br
.ti -1c
.RI "class \fBFastMap\fP"
.br
.ti -1c
.RI "class \fBFastMapEditor\fP"
.br
.ti -1c
.RI "class \fBFolder\fP"
.br
.ti -1c
.RI "class \fBHashMap\fP"
.br
.ti -1c
.RI "class \fBKeyDefinition\fP"
.br
.ti -1c
.RI "class \fBLifo\fP"
.br
.ti -1c
.RI "class \fBQueue\fP"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "pso::Session::Session ()"
.PP
Creates a new empty \fBSession\fP. 
.PP
You must call Init() before doing anything else. 
.SS "virtual pso::Session::~Session ()\fC [virtual]\fP"
.PP
Terminate the current session and destroy this object. 
.PP
An implicit call to Rollback is executed by this destructor. 
.SH "Member Function Documentation"
.PP 
.SS "void pso::Session::Commit ()"
.PP
Commit all insertions and deletions (of the current session) executed since the previous call to Commit or Rollback. 
.PP
Insertions and deletions subjected to this call include both data items inserted and deleted from data containers (maps, etc.) and objects themselves created with CreateObject and/or destroyed with DestroyObject.
.PP
Note: the internal calls executed by the engine to satisfy this request cannot fail. As such, you cannot find yourself with an ugly situation where some operations were committed and others not. If this function thows an exception, nothing was committed.
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::CreateFolder (const std::string & folderName)"
.PP
Create a new folder in shared memory. 
.PP
The creation of the folder only becomes permanent after a call to Commit.
.PP
\fBParameters:\fP
.RS 4
\fIfolderName\fP The fully qualified name of the object.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::CreateObject (const std::string & objectName, psoObjectDefinition & definition, DataDefinition & dataDef)"
.PP
Create a new object in shared memory. 
.PP
This overloaded method should be used for objects not requiring a key definition (queues, etc.).
.PP
The creation of the object only becomes permanent after a call to Commit.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fIdefinition\fP The type of object to create and more. 
.br
\fIdataDef\fP The definition of the data fields of the object.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::CreateObject (const std::string & objectName, psoObjectDefinition & definition, const std::string & dataDefName)"
.PP
Create a new object in shared memory. 
.PP
This overloaded method should be used for objects not requiring a key definition (queues, etc.). It also uses the name of an existing data definition instead of requiring a DataDefinition object.
.PP
The creation of the object only becomes permanent after a call to Commit.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fIdefinition\fP The type of object to create and more. 
.br
\fIdataDefName\fP The name of an existing data definition for the data fields of the object. This name is case sensitive.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::CreateObject (const std::string & objectName, psoObjectDefinition & definition, KeyDefinition & keyDef, DataDefinition & dataDef)"
.PP
Create a new object in shared memory. 
.PP
This overloaded method should be used for objects requiring a key definition (hash maps, etc.).
.PP
The creation of the object only becomes permanent after a call to Commit.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fIdefinition\fP The type of object to create (folder, queue, etc.), the type of field definition, etc. 
.br
\fIkeyDef\fP The definition of the key of the object. 
.br
\fIdataDef\fP The definition of the data fields of the object.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::CreateObject (const std::string & objectName, psoObjectDefinition & definition, const std::string & keyDefName, const std::string & dataDefName)"
.PP
Create a new object in shared memory. 
.PP
This overloaded method should be used for objects requiring a key definition (hash maps, etc.). It also uses the names of both an existing data definition and a key definition instead of requiring a DataDefinition object and a KeyDefinition object.
.PP
The creation of the object only becomes permanent after a call to Commit.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fIdefinition\fP The type of object to create (folder, queue, etc.), the type of field definition, etc. 
.br
\fIkeyDefName\fP The name of the definition of the key of the object. 
.br
\fIdataDefName\fP The name of the data definition for the data fields of the object.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::DestroyObject (const std::string & objectName)"
.PP
Destroy an existing object in shared memory. 
.PP
The destruction of the object only becomes permanent after a call to Commit.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "std::string& pso::Session::ErrorMsg (std::string & message)"
.PP
Return the error message associated with the last error(s). 
.PP
Caveat, some basic errors cannot be captured, if the provided handles (session handles or object handles) are incorrect (NULL, for example). Without a proper handle, the code cannot know where to store the error...
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP Buffer for the error message. Memory allocation for this buffer is the responsability of the caller.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::ErrorMsg (char * message, psoUint32 msgLengthInBytes)"
.PP
Return the error message associated with the last error(s). 
.PP
If the length of the error message is greater than the length of the provided buffer, the error message will be truncated to fit in the provided buffer.
.PP
Caveat, some basic errors cannot be captured, if the provided handles (session handles or object handles) are incorrect (NULL, for example). Without a proper handle, the code cannot know where to store the error...
.PP
\fBParameters:\fP
.RS 4
\fImessage\fP Buffer for the error message. Memory allocation for this buffer is the responsability of the caller. 
.br
\fImsgLengthInBytes\fP The length of \fImessage\fP (in bytes). Must be at least 32 bytes.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::GetDefinition (const std::string & objectName, psoObjectDefinition & definition)"
.PP
Retrieve the basic definition of the named object. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fIdefinition\fP The definition of the object
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "DataDefinition* pso::Session::GetDataDefinition (const std::string & objectName)"
.PP
Retrieve the data definition of the named object. 
.PP
This function may return a new object. It is the responsability of the caller to delete the object.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object.
.RE
.PP
\fBReturns:\fP
.RS 4
A new DataDefinition object or NULL if the object is a Folder.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "KeyDefinition* pso::Session::GetKeyDefinition (const std::string & objectName)"
.PP
Retrieve the key definition of the named object. 
.PP
This function may return a new object. It is the responsability of the caller to delete the object.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object.
.RE
.PP
\fBReturns:\fP
.RS 4
A new KeyDefinition object or NULL if the object does not have a key definition (Folders, Queues, etc.).
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::GetInfo (psoInfo & info)"
.PP
Return information on the current status of the shared memory. 
.PP
The fetched information is mainly about the current status of the memory allocator.
.PP
\fBParameters:\fP
.RS 4
\fIinfo\fP A reference to the psoInfo structure.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::GetStatus (const std::string & objectName, psoObjStatus & status)"
.PP
Return the status of the named object. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The fully qualified name of the object. 
.br
\fIstatus\fP A reference to the psoObjStatus structure.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::Init ()"
.PP
This function initializes a session. 
.PP
This function will also initiate a new transaction.
.PP
Upon normal termination, the current transaction is rolled back. You MUST explicitly call Commit to save your changes.
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "int pso::Session::LastError ()"
.PP
Return the last error seen in previous calls (of the current session). 
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SS "void pso::Session::Rollback ()"
.PP
Rollback all insertions and deletions (of the current session) executed since the previous call to Commit or Rollback. 
.PP
Insertions and deletions subjected to this call include both data items inserted and deleted from data containers (maps, etc.) and objects themselves created with CreateObject and/or destroyed with DestroyObject.
.PP
Note: the internal calls executed by the engine to satisfy this request cannot fail. As such, you cannot find yourself with an ugly situation where some operations were rollbacked and others not. If this function thows an exception, nothing was rollbacked.
.PP
\fBExceptions:\fP
.RS 4
\fIpso::Exception\fP An abnormal error occured. 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class DataDefinition\fC [friend]\fP"
.PP
Definition at line 367 of file Session.
.SS "friend class FastMap\fC [friend]\fP"
.PP
Definition at line 368 of file Session.
.SS "friend class FastMapEditor\fC [friend]\fP"
.PP
Definition at line 369 of file Session.
.SS "friend class Folder\fC [friend]\fP"
.PP
Definition at line 370 of file Session.
.SS "friend class HashMap\fC [friend]\fP"
.PP
Definition at line 371 of file Session.
.SS "friend class KeyDefinition\fC [friend]\fP"
.PP
Definition at line 372 of file Session.
.SS "friend class Lifo\fC [friend]\fP"
.PP
Definition at line 373 of file Session.
.SS "friend class Queue\fC [friend]\fP"
.PP
Definition at line 374 of file Session.
.SH "Member Data Documentation"
.PP 
.SS "PSO_HANDLE \fBpso::Session::m_sessionHandle\fP\fC [private]\fP"
.PP
Pointer to the psoaSession struct. 
.PP
Definition at line 365 of file Session.

.SH "Author"
.PP 
Generated automatically by Doxygen for Photon C++ API from the source code.
