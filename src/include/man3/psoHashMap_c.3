.TH "API functions for Photon hash maps." 3 "8 Nov 2008" "Version 0.4.0" "Photon Software" \" -*- nroff -*-
.ad l
.nh
.SH NAME
API functions for Photon hash maps. \- 
.SH "Detailed Description"
.PP 
Hash maps use unique keys - the data items are not sorted. 
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapClose\fP (\fBPSO_HANDLE\fP objectHandle)"
.br
.RI "\fIClose a Hash Map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapDefinition\fP (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjectDefinition\fP **definition)"
.br
.RI "\fIRetrieve the data definition of the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapDelete\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, size_t keyLength)"
.br
.RI "\fIRemove the data item identified by the given key from the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapGet\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, size_t keyLength, void *buffer, size_t bufferLength, size_t *returnedLength)"
.br
.RI "\fIRetrieve the data item identified by the given key from the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapGetFirst\fP (\fBPSO_HANDLE\fP objectHandle, void *key, size_t keyLength, void *buffer, size_t bufferLength, size_t *retKeyLength, size_t *retDataLength)"
.br
.RI "\fIIterate through the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapGetNext\fP (\fBPSO_HANDLE\fP objectHandle, void *key, size_t keyLength, void *buffer, size_t bufferLength, size_t *retKeyLength, size_t *retDataLength)"
.br
.RI "\fIIterate through the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapInsert\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, size_t keyLength, const void *data, size_t dataLength)"
.br
.RI "\fIInsert a data element in the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapOpen\fP (\fBPSO_HANDLE\fP sessionHandle, const char *hashMapName, size_t nameLengthInBytes, \fBPSO_HANDLE\fP *objectHandle)"
.br
.RI "\fIOpen an existing hash map (see \fBpsoCreateObject\fP to create a new object). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapReplace\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, size_t keyLength, const void *data, size_t dataLength)"
.br
.RI "\fIReplace a data element in the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapStatus\fP (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjStatus\fP *pStatus)"
.br
.RI "\fIReturn the status of the hash map. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "PHOTON_EXPORT int psoHashMapClose (\fBPSO_HANDLE\fP objectHandle)"
.PP
Close a Hash Map. 
.PP
This function terminates the current access to the hash map in shared memory (the hash map itself is untouched).
.PP
\fBWarning:\fP
.RS 4
Closing an object does not automatically commit or rollback data items that were inserted or removed. You still must use either \fBpsoCommit\fP or \fBpsoRollback\fP to end the current unit of work.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapDefinition (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjectDefinition\fP ** definition)"
.PP
Retrieve the data definition of the hash map. 
.PP
\fBWarning:\fP
.RS 4
This function allocates a buffer to hold the definition (using malloc()). You must free it (with free()) when you no longer need the definition.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIdefinition\fP The buffer allocated by the API to hold the content of the object definition. Freeing the memory (with free()) is the responsability of the caller.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapDelete (\fBPSO_HANDLE\fP objectHandle, const void * key, size_t keyLength)"
.PP
Remove the data item identified by the given key from the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by this function and cannot be removed. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
The removals only become permanent after a call to \fBpsoCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key of the item to be removed. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapGet (\fBPSO_HANDLE\fP objectHandle, const void * key, size_t keyLength, void * buffer, size_t bufferLength, size_t * returnedLength)"
.PP
Retrieve the data item identified by the given key from the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by this function. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key of the item to be retrieved. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the data item. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIreturnedLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapGetFirst (\fBPSO_HANDLE\fP objectHandle, void * key, size_t keyLength, void * buffer, size_t bufferLength, size_t * retKeyLength, size_t * retDataLength)"
.PP
Iterate through the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
Data items retrieved this way will not be sorted.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key buffer provided by the user to hold the content of the key associated with the first element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the first element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIretKeyLength\fP The actual number of bytes in the key 
.br
\fIretDataLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapGetNext (\fBPSO_HANDLE\fP objectHandle, void * key, size_t keyLength, void * buffer, size_t bufferLength, size_t * retKeyLength, size_t * retDataLength)"
.PP
Iterate through the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
Evidently, you must call \fBpsoHashMapGetFirst\fP to initialize the iterator. Not so evident - calling \fBpsoHashMapGet\fP will reset the iteration to the data item retrieved by this function (they use the same internal storage). If this cause a problem, please let us know.
.PP
Data items retrieved this way will not be sorted.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key buffer provided by the user to hold the content of the key associated with the data element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the data element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIretKeyLength\fP The actual number of bytes in the key 
.br
\fIretDataLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapInsert (\fBPSO_HANDLE\fP objectHandle, const void * key, size_t keyLength, const void * data, size_t dataLength)"
.PP
Insert a data element in the hash map. 
.PP
The additions only become permanent after a call to \fBpsoCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key of the item to be inserted. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIdata\fP The data item to be inserted. 
.br
\fIdataLength\fP The length of \fIdata\fP (in bytes).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapOpen (\fBPSO_HANDLE\fP sessionHandle, const char * hashMapName, size_t nameLengthInBytes, \fBPSO_HANDLE\fP * objectHandle)"
.PP
Open an existing hash map (see \fBpsoCreateObject\fP to create a new object). 
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP The handle to the current session. 
.br
\fIhashMapName\fP The fully qualified name of the hash map. 
.br
\fInameLengthInBytes\fP The length of \fIhashMapName\fP (in bytes) not counting the null terminator (null-terminators are not used by the Photon engine). 
.br
\fIobjectHandle\fP The handle to the hash map, allowing us access to the map in shared memory. On error, this handle will be set to zero (NULL) unless the objectHandle pointer itself is NULL.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapReplace (\fBPSO_HANDLE\fP objectHandle, const void * key, size_t keyLength, const void * data, size_t dataLength)"
.PP
Replace a data element in the hash map. 
.PP
The replacements only become permanent after a call to \fBpsoCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key of the item to be replaced. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIdata\fP The new data item that will replace the previous data. 
.br
\fIdataLength\fP The length of \fIdata\fP (in bytes).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapStatus (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjStatus\fP * pStatus)"
.PP
Return the status of the hash map. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIpStatus\fP A pointer to the status structure.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

