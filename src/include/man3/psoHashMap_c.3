.TH "API functions for Photon hash maps." 3 "25 Jun 2009" "Version 0.5.0" "Photon Software" \" -*- nroff -*-
.ad l
.nh
.SH NAME
API functions for Photon hash maps. \- 
.SH "Detailed Description"
.PP 
Hash maps use unique keys - the data items are not sorted. 
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapClose\fP (\fBPSO_HANDLE\fP objectHandle)"
.br
.RI "\fIClose a Hash Map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapDefinition\fP (\fBPSO_HANDLE\fP objectHandle, \fBPSO_HANDLE\fP *keyDefHandle, \fBPSO_HANDLE\fP *dataDefHandle)"
.br
.RI "\fIRetrieve the data definition of the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapDelete\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, \fBpsoUint32\fP keyLength)"
.br
.RI "\fIRemove the data item identified by the given key from the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapGet\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, \fBpsoUint32\fP keyLength, void *buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP *returnedLength)"
.br
.RI "\fIRetrieve the data item identified by the given key from the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapGetFirst\fP (\fBPSO_HANDLE\fP objectHandle, void *key, \fBpsoUint32\fP keyLength, void *buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP *retKeyLength, \fBpsoUint32\fP *retDataLength)"
.br
.RI "\fIInitiates an iteratation through the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapGetNext\fP (\fBPSO_HANDLE\fP objectHandle, void *key, \fBpsoUint32\fP keyLength, void *buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP *retKeyLength, \fBpsoUint32\fP *retDataLength)"
.br
.RI "\fIIterate through the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapInsert\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, \fBpsoUint32\fP keyLength, const void *data, \fBpsoUint32\fP dataLength, \fBPSO_HANDLE\fP dataDefHandle)"
.br
.RI "\fIInsert a data element in the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapOpen\fP (\fBPSO_HANDLE\fP sessionHandle, const char *hashMapName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP *objectHandle)"
.br
.RI "\fIOpen an existing hash map (see \fBpsoCreateMap\fP to create a new object). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapRecordDefinition\fP (\fBPSO_HANDLE\fP objectHandle, \fBPSO_HANDLE\fP *dataDefHandle)"
.br
.RI "\fIRetrieves a handle allowing you to access the data definition of the last accessed record. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapReplace\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, \fBpsoUint32\fP keyLength, const void *data, \fBpsoUint32\fP dataLength, \fBPSO_HANDLE\fP dataDefHandle)"
.br
.RI "\fIReplace a data element in the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoHashMapStatus\fP (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjStatus\fP *pStatus)"
.br
.RI "\fIReturn the status of the hash map. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "PHOTON_EXPORT int psoHashMapClose (\fBPSO_HANDLE\fP objectHandle)"
.PP
Close a Hash Map. 
.PP
This function terminates the current access to the hash map in shared memory (the hash map itself is untouched).
.PP
\fBWarning:\fP
.RS 4
Closing an object does not automatically commit or rollback data items that were inserted or removed. You still must use either \fBpsoCommit\fP or \fBpsoRollback\fP to end the current unit of work.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapDefinition (\fBPSO_HANDLE\fP objectHandle, \fBPSO_HANDLE\fP * keyDefHandle, \fBPSO_HANDLE\fP * dataDefHandle)"
.PP
Retrieve the data definition of the hash map. 
.PP
To avoid memory leaks, you must close the handles that will be returned by this function (see \fBpsoDataDefClose\fP and \fBpsoKeyDefClose\fP).
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkeyDefHandle\fP Handle to the key definition. 
.br
\fIdataDefHandle\fP Handle to the definition of the data fields.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapDelete (\fBPSO_HANDLE\fP objectHandle, const void * key, \fBpsoUint32\fP keyLength)"
.PP
Remove the data item identified by the given key from the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by this function and cannot be removed. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
The removals only become permanent after a call to \fBpsoCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key of the item to be removed. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapGet (\fBPSO_HANDLE\fP objectHandle, const void * key, \fBpsoUint32\fP keyLength, void * buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP * returnedLength)"
.PP
Retrieve the data item identified by the given key from the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by this function. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key of the item to be retrieved. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the data item. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIreturnedLength\fP The actual number of bytes copied in the data buffer.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapGetFirst (\fBPSO_HANDLE\fP objectHandle, void * key, \fBpsoUint32\fP keyLength, void * buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP * retKeyLength, \fBpsoUint32\fP * retDataLength)"
.PP
Initiates an iteratation through the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
Data items retrieved this way will not be sorted.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key buffer provided by the user to hold the content of the key associated with the first element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the first element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIretKeyLength\fP The actual number of bytes copied in the key buffer. 
.br
\fIretDataLength\fP The actual number of bytes copied in the data buffer.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, PSO_IS_EMPTY if the hash map is empty or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapGetNext (\fBPSO_HANDLE\fP objectHandle, void * key, \fBpsoUint32\fP keyLength, void * buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP * retKeyLength, \fBpsoUint32\fP * retDataLength)"
.PP
Iterate through the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
Evidently, you must call \fBpsoHashMapGetFirst\fP to initialize the iterator. Not so evident - calling \fBpsoHashMapGet\fP will reset the iteration to the data item retrieved by this function (they use the same internal storage). If this cause a problem, please let us know.
.PP
Data items retrieved this way will not be sorted.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key buffer provided by the user to hold the content of the key associated with the data element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the data element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIretKeyLength\fP The actual number of bytes copied in the key buffer. 
.br
\fIretDataLength\fP The actual number of bytes copied in the data buffer.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, PSO_REACHED_THE_END when the iteration reaches the end of the hash map or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapInsert (\fBPSO_HANDLE\fP objectHandle, const void * key, \fBpsoUint32\fP keyLength, const void * data, \fBpsoUint32\fP dataLength, \fBPSO_HANDLE\fP dataDefHandle)"
.PP
Insert a data element in the hash map. 
.PP
The additions only become permanent after a call to \fBpsoCommit\fP.
.PP
The \fIdataDefHandle\fP argument should be used (non-NULL) only if you use this hash map to store data records having different data definitions.
.PP
This could be used to implement inheritance of the data records or to build a mismatched collection of records.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key of the item to be inserted. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIdata\fP The data item to be inserted. 
.br
\fIdataLength\fP The length of \fIdata\fP (in bytes). 
.br
\fIdataDefHandle\fP An optional handle to a data definition for this specific data record. The hash map must have been created with the appropriate flag to support this feature. Set this handle to NULL to use the default data definition.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapOpen (\fBPSO_HANDLE\fP sessionHandle, const char * hashMapName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP * objectHandle)"
.PP
Open an existing hash map (see \fBpsoCreateMap\fP to create a new object). 
.PP
Hah maps will usually contain data records with an identical layout (data definition of the items). This layout was defined when the map was created.
.PP
You can also insert and retrieve data records with different layouts if the object was created with the flag PSO_MULTIPLE_DATA_DEFINITIONS. The layout defined when a map is created is then used as the default one.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP The handle to the current session. 
.br
\fIhashMapName\fP The fully qualified name of the hash map. 
.br
\fInameLengthInBytes\fP The length of \fIhashMapName\fP (in bytes) not counting the null terminator (null-terminators are not used by the Photon engine). 
.br
\fIobjectHandle\fP The handle to the hash map, allowing us access to the map in shared memory. On error, this handle will be set to zero (NULL) unless the objectHandle pointer itself is NULL.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapRecordDefinition (\fBPSO_HANDLE\fP objectHandle, \fBPSO_HANDLE\fP * dataDefHandle)"
.PP
Retrieves a handle allowing you to access the data definition of the last accessed record. 
.PP
Explanation:
.PP
Hah maps will usually contain data records with an identical layout (data definition of the items). This layout was defined when the map was created.
.PP
You can also insert and retrieve data records with different layouts if the object was created with the flag PSO_MULTIPLE_DATA_DEFINITIONS. The layout defined when a map is created is then used as the default one.
.PP
To access the layout on a record-by-record base, use the argument \fIdataDefHandle\fP - it will be set to the layout of the last retrieved record.
.PP
Note: you only need to get the handle once. The hidden fields associated with this handle will be updated after each record is retrieved. The handle will point to the data definition of the hash map upon initialization.
.PP
You must close the handle with \fBpsoDataDefClose\fP when you no longer need it.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map 
.br
\fIdataDefHandle\fP This optional handle gives you access to the data definition of the record on a record by record basis. This handle must be closed with \fBpsoDataDefClose\fP.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapReplace (\fBPSO_HANDLE\fP objectHandle, const void * key, \fBpsoUint32\fP keyLength, const void * data, \fBpsoUint32\fP dataLength, \fBPSO_HANDLE\fP dataDefHandle)"
.PP
Replace a data element in the hash map. 
.PP
The replacements only become permanent after a call to \fBpsoCommit\fP.
.PP
The \fIdataDefHandle\fP argument should be used (non-NULL) only if you use this hash map to store data records having different data definitions.
.PP
This could be used to implement inheritance of the data records or to build a mismatched collection of records.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIkey\fP The key of the item to be replaced. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIdata\fP The new data item that will replace the previous data. 
.br
\fIdataLength\fP The length of \fIdata\fP (in bytes). 
.br
\fIdataDefHandle\fP An optional handle to a data definition for this specific data record. The hash map must have been created with the appropriate flag to support this feature. Set this handle to NULL to use the default data definition.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoHashMapStatus (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjStatus\fP * pStatus)"
.PP
Return the status of the hash map. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoHashMapOpen\fP). 
.br
\fIpStatus\fP A pointer to the status structure.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

