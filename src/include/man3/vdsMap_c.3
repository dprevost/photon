.TH "API functions for vdsf read-only hash maps." 3 "26 Jun 2008" "Version 0.3.0" "vdsf C API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
API functions for vdsf read-only hash maps. \- 
.SH "Detailed Description"
.PP 
Hash maps use unique keys - the data items are not sorted. 
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "VDSF_EXPORT int \fBvdsMapClose\fP (\fBVDS_HANDLE\fP objectHandle)"
.br
.RI "\fIClose a Hash Map. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsMapDefinition\fP (\fBVDS_HANDLE\fP objectHandle, \fBvdsObjectDefinition\fP **definition)"
.br
.RI "\fIRetrieve the data definition of the hash map. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsMapDelete\fP (\fBVDS_HANDLE\fP objectHandle, const void *key, size_t keyLength)"
.br
.RI "\fIRemove the data item identified by the given key from the hash map (you must be in edit mode). \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsMapEdit\fP (\fBVDS_HANDLE\fP sessionHandle, const char *hashMapName, size_t nameLengthInBytes, \fBVDS_HANDLE\fP *objectHandle)"
.br
.RI "\fIOpen a temporary copy of an existing hash map for editing. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsMapGet\fP (\fBVDS_HANDLE\fP objectHandle, const void *key, size_t keyLength, void *buffer, size_t bufferLength, size_t *returnedLength)"
.br
.RI "\fIRetrieve the data item identified by the given key from the hash map. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsMapGetFirst\fP (\fBVDS_HANDLE\fP objectHandle, void *key, size_t keyLength, void *buffer, size_t bufferLength, size_t *retKeyLength, size_t *retDataLength)"
.br
.RI "\fIIterate through the hash map. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsMapGetNext\fP (\fBVDS_HANDLE\fP objectHandle, void *key, size_t keyLength, void *buffer, size_t bufferLength, size_t *retKeyLength, size_t *retDataLength)"
.br
.RI "\fIIterate through the hash map. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsMapInsert\fP (\fBVDS_HANDLE\fP objectHandle, const void *key, size_t keyLength, const void *data, size_t dataLength)"
.br
.RI "\fIInsert a data element in the hash map (you must be in edit mode). \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsMapOpen\fP (\fBVDS_HANDLE\fP sessionHandle, const char *hashMapName, size_t nameLengthInBytes, \fBVDS_HANDLE\fP *objectHandle)"
.br
.RI "\fIOpen an existing hash map read only (see \fBvdsCreateObject\fP to create a new object). \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsMapReplace\fP (\fBVDS_HANDLE\fP objectHandle, const void *key, size_t keyLength, const void *data, size_t dataLength)"
.br
.RI "\fIReplace a data element in the hash map (you must be in edit mode). \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsMapStatus\fP (\fBVDS_HANDLE\fP objectHandle, \fBvdsObjStatus\fP *pStatus)"
.br
.RI "\fIReturn the status of the hash map. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "VDSF_EXPORT int vdsMapClose (\fBVDS_HANDLE\fP objectHandle)"
.PP
Close a Hash Map. 
.PP
This function terminates the current access to the hash map in shared memory (the hash map itself is untouched).
.PP
\fBWarning:\fP
.RS 4
Closing an object does not automatically commit or rollback data items that were inserted or removed (if the map was open with \fBvdsMapEdit\fP). You still must use either \fBvdsCommit\fP or \fBvdsRollback\fP to end the current unit of work.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBvdsMapOpen\fP or \fBvdsMapEdit\fP). 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsMapDefinition (\fBVDS_HANDLE\fP objectHandle, \fBvdsObjectDefinition\fP ** definition)"
.PP
Retrieve the data definition of the hash map. 
.PP
\fBWarning:\fP
.RS 4
This function allocates a buffer to hold the definition (using malloc()). You must free it (with free()) when you no longer need the definition.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBvdsMapOpen\fP or \fBvdsMapEdit\fP). 
.br
\fIdefinition\fP The buffer allocated by the API to hold the content of the object definition. Freeing the memory (with free()) is the responsability of the caller.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsMapDelete (\fBVDS_HANDLE\fP objectHandle, const void * key, size_t keyLength)"
.PP
Remove the data item identified by the given key from the hash map (you must be in edit mode). 
.PP
The removals only become permanent after a call to \fBvdsCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBvdsMapEdit\fP). 
.br
\fIkey\fP The key of the item to be removed. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsMapEdit (\fBVDS_HANDLE\fP sessionHandle, const char * hashMapName, size_t nameLengthInBytes, \fBVDS_HANDLE\fP * objectHandle)"
.PP
Open a temporary copy of an existing hash map for editing. 
.PP
The copy becomes the latest version of the map when a session is committed.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP The handle to the current session. 
.br
\fIhashMapName\fP The fully qualified name of the hash map. 
.br
\fInameLengthInBytes\fP The length of \fIhashMapName\fP (in bytes) not counting the null terminator (null-terminators are not used by the vdsf engine). 
.br
\fIobjectHandle\fP The handle to the hash map, allowing us access to the map in shared memory. On error, this handle will be set to zero (NULL) unless the objectHandle pointer itself is NULL.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsMapGet (\fBVDS_HANDLE\fP objectHandle, const void * key, size_t keyLength, void * buffer, size_t bufferLength, size_t * returnedLength)"
.PP
Retrieve the data item identified by the given key from the hash map. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBvdsMapOpen\fP or \fBvdsMapEdit\fP). 
.br
\fIkey\fP The key of the item to be retrieved. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the data item. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIreturnedLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsMapGetFirst (\fBVDS_HANDLE\fP objectHandle, void * key, size_t keyLength, void * buffer, size_t bufferLength, size_t * retKeyLength, size_t * retDataLength)"
.PP
Iterate through the hash map. 
.PP
Data items retrieved this way will not be sorted.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBvdsMapOpen\fP or \fBvdsMapEdit\fP). 
.br
\fIkey\fP The key buffer provided by the user to hold the content of the key associated with the first element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the first element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIretKeyLength\fP The actual number of bytes in the key 
.br
\fIretDataLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsMapGetNext (\fBVDS_HANDLE\fP objectHandle, void * key, size_t keyLength, void * buffer, size_t bufferLength, size_t * retKeyLength, size_t * retDataLength)"
.PP
Iterate through the hash map. 
.PP
Evidently, you must call \fBvdsMapGetFirst\fP to initialize the iterator. Not so evident - calling \fBvdsMapGet\fP will reset the iteration to the data item retrieved by this function (they use the same internal storage). If this cause a problem, please let us know.
.PP
Data items retrieved this way will not be sorted.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBvdsMapOpen\fP or \fBvdsMapEdit\fP). 
.br
\fIkey\fP The key buffer provided by the user to hold the content of the key associated with the data element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the data element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIretKeyLength\fP The actual number of bytes in the key 
.br
\fIretDataLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsMapInsert (\fBVDS_HANDLE\fP objectHandle, const void * key, size_t keyLength, const void * data, size_t dataLength)"
.PP
Insert a data element in the hash map (you must be in edit mode). 
.PP
The additions only become permanent after a call to \fBvdsCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBvdsMapEdit\fP). 
.br
\fIkey\fP The key of the item to be inserted. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIdata\fP The data item to be inserted. 
.br
\fIdataLength\fP The length of \fIdata\fP (in bytes).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsMapOpen (\fBVDS_HANDLE\fP sessionHandle, const char * hashMapName, size_t nameLengthInBytes, \fBVDS_HANDLE\fP * objectHandle)"
.PP
Open an existing hash map read only (see \fBvdsCreateObject\fP to create a new object). 
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP The handle to the current session. 
.br
\fIhashMapName\fP The fully qualified name of the hash map. 
.br
\fInameLengthInBytes\fP The length of \fIhashMapName\fP (in bytes) not counting the null terminator (null-terminators are not used by the vdsf engine). 
.br
\fIobjectHandle\fP The handle to the hash map, allowing us access to the map in shared memory. On error, this handle will be set to zero (NULL) unless the objectHandle pointer itself is NULL.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsMapReplace (\fBVDS_HANDLE\fP objectHandle, const void * key, size_t keyLength, const void * data, size_t dataLength)"
.PP
Replace a data element in the hash map (you must be in edit mode). 
.PP
The replacements only become permanent after a call to \fBvdsCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBvdsMapEdit\fP). 
.br
\fIkey\fP The key of the item to be replaced. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIdata\fP The new data item that will replace the previous data. 
.br
\fIdataLength\fP The length of \fIdata\fP (in bytes).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsMapStatus (\fBVDS_HANDLE\fP objectHandle, \fBvdsObjStatus\fP * pStatus)"
.PP
Return the status of the hash map. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBvdsMapOpen\fP or \fBvdsMapEdit\fP). 
.br
\fIpStatus\fP A pointer to the status structure.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

