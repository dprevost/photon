.TH "API functions for Photon FIFO queues." 3 "25 Jun 2009" "Version 0.5.0" "Photon Software" \" -*- nroff -*-
.ad l
.nh
.SH NAME
API functions for Photon FIFO queues. \- 
.SH "Detailed Description"
.PP 
A reminder: FIFO, First In First Out. 
.PP
Data items are placed at the end of the queue and retrieved from the beginning of the queue. 
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoQueueClose\fP (\fBPSO_HANDLE\fP objectHandle)"
.br
.RI "\fIClose a FIFO queue. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoQueueDefinition\fP (\fBPSO_HANDLE\fP objectHandle, \fBPSO_HANDLE\fP *dataDefHandle)"
.br
.RI "\fIRetrieve the data definition of the queue. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoQueueGetFirst\fP (\fBPSO_HANDLE\fP objectHandle, void *buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP *returnedLength)"
.br
.RI "\fIInitiates an iteratation through the queue - no data items are removed from the queue by this function. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoQueueGetNext\fP (\fBPSO_HANDLE\fP objectHandle, void *buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP *returnedLength)"
.br
.RI "\fIIterate through the queue - no data items are removed from the queue by this function. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoQueueOpen\fP (\fBPSO_HANDLE\fP sessionHandle, const char *queueName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP *objectHandle)"
.br
.RI "\fIOpen an existing FIFO queue (see \fBpsoCreateQueue\fP to create a new queue). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoQueuePop\fP (\fBPSO_HANDLE\fP objectHandle, void *buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP *returnedLength)"
.br
.RI "\fIRemove the first item from the beginning of a FIFO queue and return it to the caller. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoQueuePush\fP (\fBPSO_HANDLE\fP objectHandle, const void *pItem, \fBpsoUint32\fP length, \fBPSO_HANDLE\fP dataDefHandle)"
.br
.RI "\fIInsert a data element at the end of the FIFO queue. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoQueuePushNow\fP (\fBPSO_HANDLE\fP objectHandle, const void *pItem, \fBpsoUint32\fP length, \fBPSO_HANDLE\fP dataDefHandle)"
.br
.RI "\fIInsert a data element at the end of the FIFO queue. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoQueueRecordDefinition\fP (\fBPSO_HANDLE\fP objectHandle, \fBPSO_HANDLE\fP *dataDefHandle)"
.br
.RI "\fIRetrieves a handle allowing you to access the data definition of the last accessed record. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoQueueStatus\fP (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjStatus\fP *pStatus)"
.br
.RI "\fIReturn the status of the queue. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "PHOTON_EXPORT int psoQueueClose (\fBPSO_HANDLE\fP objectHandle)"
.PP
Close a FIFO queue. 
.PP
This function terminates the current access to the queue in shared memory (the queue itself is untouched).
.PP
\fBWarning:\fP
.RS 4
Closing an object does not automatically commit or rollback data items that were inserted or removed. You still must use either \fBpsoCommit\fP or \fBpsoRollback\fP to end the current unit of work.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the queue (see \fBpsoQueueOpen\fP). 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoQueueDefinition (\fBPSO_HANDLE\fP objectHandle, \fBPSO_HANDLE\fP * dataDefHandle)"
.PP
Retrieve the data definition of the queue. 
.PP
To avoid memory leaks, you must close the handle that will be returned by this function (see \fBpsoDataDefClose\fP).
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the queue (see \fBpsoQueueOpen\fP). 
.br
\fIdataDefHandle\fP Handle to the definition of the data fields.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoQueueGetFirst (\fBPSO_HANDLE\fP objectHandle, void * buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP * returnedLength)"
.PP
Initiates an iteratation through the queue - no data items are removed from the queue by this function. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the queue (see \fBpsoQueueOpen\fP). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the first element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIreturnedLength\fP The actual number of bytes copied in the data buffer.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, PSO_IS_EMPTY if the queue is empty or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoQueueGetNext (\fBPSO_HANDLE\fP objectHandle, void * buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP * returnedLength)"
.PP
Iterate through the queue - no data items are removed from the queue by this function. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
Evidently, you must call \fBpsoQueueGetFirst\fP to initialize the iterator. Not so evident - calling \fBpsoQueuePop\fP will reset the iteration to the last element (they use the same internal storage). If this cause a problem, please let us know.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the queue (see \fBpsoQueueOpen\fP). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the next element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIreturnedLength\fP The actual number of bytes copied in the data buffer.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success, PSO_REACHED_THE_END when the iteration reaches the end of the queue or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoQueueOpen (\fBPSO_HANDLE\fP sessionHandle, const char * queueName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP * objectHandle)"
.PP
Open an existing FIFO queue (see \fBpsoCreateQueue\fP to create a new queue). 
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP The handle to the current session. 
.br
\fIqueueName\fP The fully qualified name of the queue. 
.br
\fInameLengthInBytes\fP The length of \fIqueueName\fP (in bytes) not counting the null terminator. 
.br
\fIobjectHandle\fP The handle to the queue, allowing us access to the queue in shared memory. On error, this handle will be set to zero (NULL) unless the objectHandle pointer itself is NULL.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoQueuePop (\fBPSO_HANDLE\fP objectHandle, void * buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP * returnedLength)"
.PP
Remove the first item from the beginning of a FIFO queue and return it to the caller. 
.PP
Data items which were added by another session and are not yet committed will not be seen by this function. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
The removals only become permanent after a call to \fBpsoCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the queue (see \fBpsoQueueOpen\fP). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the data item. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIreturnedLength\fP The actual number of bytes copied in the data buffer.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoQueuePush (\fBPSO_HANDLE\fP objectHandle, const void * pItem, \fBpsoUint32\fP length, \fBPSO_HANDLE\fP dataDefHandle)"
.PP
Insert a data element at the end of the FIFO queue. 
.PP
The additions only become permanent after a call to \fBpsoCommit\fP.
.PP
The \fIdataDefHandle\fP argument should be used (non-NULL) only if you use this queue to store data records having different data definitions.
.PP
This could be used to implement inheritance of the data records or to build a mismatched collection of records.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the queue (see \fBpsoQueueOpen\fP). 
.br
\fIpItem\fP The data item to be inserted. 
.br
\fIlength\fP The length of \fIpItem\fP (in bytes). 
.br
\fIdataDefHandle\fP An optional handle to a data definition for this specific data record. The queue must have been created with the appropriate flag to support this feature. Set this handle to NULL to use the default data definition.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoQueuePushNow (\fBPSO_HANDLE\fP objectHandle, const void * pItem, \fBpsoUint32\fP length, \fBPSO_HANDLE\fP dataDefHandle)"
.PP
Insert a data element at the end of the FIFO queue. 
.PP
The additions become permanent immediately, not after a call to \fBpsoCommit\fP. (in other words, you cannot easily undo these insertions).
.PP
The \fIdataDefHandle\fP argument should be used (non-NULL) only if you use this queue to store data records having different data definitions.
.PP
This could be used to implement inheritance of the data records or to build a mismatched collection of records.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the queue (see \fBpsoQueueOpen\fP). 
.br
\fIpItem\fP The data item to be inserted. 
.br
\fIlength\fP The length of \fIpItem\fP (in bytes). 
.br
\fIdataDefHandle\fP A handle to the data definition for this specific data record. The queue must have been created with the appropriate flag to support this feature.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoQueueRecordDefinition (\fBPSO_HANDLE\fP objectHandle, \fBPSO_HANDLE\fP * dataDefHandle)"
.PP
Retrieves a handle allowing you to access the data definition of the last accessed record. 
.PP
Explanation:
.PP
Queues will usually contain data records with an identical layout (data definition of the items). This layout was defined when the queue was created.
.PP
You can also insert and retrieve data records with different layouts if the object was created with the flag PSO_MULTIPLE_DATA_DEFINITIONS. The layout defined when a queue is created is then used as the default one.
.PP
To access the layout on a record-by-record base, use the argument \fIdataDefHandle\fP - it will be set to the layout of the last retrieved record.
.PP
Note: you only need to get the handle once. The hidden fields associated with this handle will be updated after each record is retrieved. The handle will point to the data definition of the queue map upon initialization.
.PP
You must close the handle with \fBpsoDataDefClose\fP when you no longer need it.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the queue 
.br
\fIdataDefHandle\fP This optional handle gives you access to the data definition of the record on a record by record basis. This handle must be closed with \fBpsoDataDefClose\fP.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoQueueStatus (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjStatus\fP * pStatus)"
.PP
Return the status of the queue. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the queue (see \fBpsoQueueOpen\fP). 
.br
\fIpStatus\fP A pointer to the status structure.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

