.TH "psoSession.h" 3 "10 Dec 2008" "Version 0.4.0" "Photon Software" \" -*- nroff -*-
.ad l
.nh
.SH NAME
psoSession.h \- 
.SH "Detailed Description"
.PP 
This file provides the API needed to create and use a session. 

Sessions exist mainly to support multi-threaded (MT) programs.
.PP
Best practices: 
.PD 0

.IP "\(bu" 2
Each thread of an MT program should have its own session, making it independent of the other threads. 
.PP

.IP "\(bu" 2
If you need to open the same Photon object in multiple threads, simply open it multiple times, for each thread. The overhead of having multiple handles to the same shared-memory data container is minimal and increases the overall performance of the framework. 
.PP

.IP "\(bu" 2
Signal handlers (and similar calls): you should not call \fBpsoExit\fP or \fBpsoExitSession\fP (or similar) from a signal handler. Instead, some global flags should be set that will allow each session to terminate in an orderly fashion.  
.PP
.PP
If you cannot follow these guidelines for whatever reasons, you should set the parameter \fIprotectionNeeded\fP of \fBpsoInit\fP to 1. This will introduce additional multi-threaded protection (locking) for your applications.
.PP
Additional note: API objects (or C handles) are just proxies for the real objects sitting in shared memory. Proper synchronization is already done in shared memory and it is best to avoid the additional synchronization of these proxy objects. 
.PP
Definition in file \fBpsoSession.h\fP.
.SH SYNOPSIS
.br
.PP
\fC#include <photon/psoCommon.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoCommit\fP (\fBPSO_HANDLE\fP sessionHandle)"
.br
.RI "\fICommit all insertions and deletions (of the current session) executed since the previous call to psoCommit or psoRollback. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoCreateObject\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP *pDefinition, \fBpsoFieldDefinition\fP *fields)"
.br
.RI "\fICreate a new object in shared memory. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoDestroyObject\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes)"
.br
.RI "\fIDestroy an existing object in shared memory. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoErrorMsg\fP (\fBPSO_HANDLE\fP sessionHandle, char *message, \fBpsoUint32\fP msgLengthInBytes)"
.br
.RI "\fIReturn the error message associated with the last error(s). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoExitSession\fP (\fBPSO_HANDLE\fP sessionHandle)"
.br
.RI "\fITerminate the current session. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoGetDefinition\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP **definition)"
.br
.RI "\fIRetrieve the data definition of the named object. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoGetInfo\fP (\fBPSO_HANDLE\fP sessionHandle, \fBpsoInfo\fP *pInfo)"
.br
.RI "\fIReturn information on the current status of the shared memory. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoGetStatus\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjStatus\fP *pStatus)"
.br
.RI "\fIReturn the status of the named object. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoInitSession\fP (\fBPSO_HANDLE\fP *sessionHandle)"
.br
.RI "\fIThis function initializes a session. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoLastError\fP (\fBPSO_HANDLE\fP sessionHandle)"
.br
.RI "\fIReturn the last error seen in previous calls (of the current session). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoRollback\fP (\fBPSO_HANDLE\fP sessionHandle)"
.br
.RI "\fIRollback all insertions and deletions (of the current session) executed since the previous call to psoCommit or psoRollback. \fP"
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for Photon Software from the source code.
