.TH "psoHashMap" 3 "26 Aug 2008" "Version 0.3" "Photon C++ API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
psoHashMap \- 
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
Definition at line 36 of file psoHashMap.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBpsoHashMap\fP (psoSession &session)"
.br
.ti -1c
.RI "virtual \fB~psoHashMap\fP ()"
.br
.ti -1c
.RI "void \fBClose\fP ()"
.br
.RI "\fIClose a hash map. \fP"
.ti -1c
.RI "void \fBDefinition\fP (psoObjectDefinition **definition)"
.br
.RI "\fIRetrieve the data definition of the hash map. \fP"
.ti -1c
.RI "void \fBDelete\fP (const void *key, size_t keyLength)"
.br
.RI "\fIRemove the data item identified by the given key from the hash map. \fP"
.ti -1c
.RI "void \fBGet\fP (const void *key, size_t keyLength, void *buffer, size_t bufferLength, size_t *returnedLength)"
.br
.RI "\fIRetrieve the data item identified by the given key from the hash map. \fP"
.ti -1c
.RI "int \fBGetFirst\fP (void *key, size_t keyLength, void *buffer, size_t bufferLength, size_t *retKeyLength, size_t *retDataLength)"
.br
.RI "\fIIterate through the hash map. \fP"
.ti -1c
.RI "int \fBGetNext\fP (void *key, size_t keyLength, void *buffer, size_t bufferLength, size_t *retKeyLength, size_t *retDataLength)"
.br
.RI "\fIIterate through the hash map. \fP"
.ti -1c
.RI "void \fBInsert\fP (const void *key, size_t keyLength, const void *data, size_t dataLength)"
.br
.RI "\fIInsert a data element in the hash map. \fP"
.ti -1c
.RI "void \fBOpen\fP (const std::string &hashMapName)"
.br
.RI "\fIOpen an existing hash map (see psoSession::CreateObject to create a new object). \fP"
.ti -1c
.RI "void \fBOpen\fP (const char *hashMapName, size_t nameLengthInBytes)"
.br
.RI "\fIOpen an existing hash map (see psoSession::CreateObject to create a new object). \fP"
.ti -1c
.RI "void \fBReplace\fP (const void *key, size_t keyLength, const void *data, size_t dataLength)"
.br
.RI "\fIReplace a data element in the hash map. \fP"
.ti -1c
.RI "void \fBStatus\fP (psoObjStatus *pStatus)"
.br
.RI "\fIReturn the status of the hash map. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "PSO_HANDLE \fBm_objectHandle\fP"
.br
.RI "\fIPointer to the psoaHashMap struct. \fP"
.ti -1c
.RI "PSO_HANDLE & \fBm_sessionHandle\fP"
.br
.RI "\fIReference to the psoaSession struct (we belong to). \fP"
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "psoHashMap::psoHashMap (psoSession & session)"
.PP
.SS "virtual psoHashMap::~psoHashMap ()\fC [virtual]\fP"
.PP
.SH "Member Function Documentation"
.PP 
.SS "void psoHashMap::Close ()"
.PP
Close a hash map. 
.PP
This function terminates the current access to the hash map in shared memory (the hash map itself is untouched).
.PP
\fBWarning:\fP
.RS 4
Closing an object does not automatically commit or rollback data items that were inserted or removed. You still must use either psoSession::Commit or psoSession::Rollback to end the current unit of work.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoHashMap::Definition (psoObjectDefinition ** definition)"
.PP
Retrieve the data definition of the hash map. 
.PP
\fBWarning:\fP
.RS 4
This function allocates a buffer to hold the definition (using malloc()). You must free it (with free()) when you no longer need the definition.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIdefinition\fP The buffer allocated by the API to hold the content of the object definition. Freeing the memory (with free()) is the responsability of the caller.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoHashMap::Delete (const void * key, size_t keyLength)"
.PP
Remove the data item identified by the given key from the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by this function and cannot be removed. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
The removals only become permanent after a call to psoSession::Commit.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key of the item to be removed. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes).
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoHashMap::Get (const void * key, size_t keyLength, void * buffer, size_t bufferLength, size_t * returnedLength)"
.PP
Retrieve the data item identified by the given key from the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by this function. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key of the item to be retrieved. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the data item. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIreturnedLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "int psoHashMap::GetFirst (void * key, size_t keyLength, void * buffer, size_t bufferLength, size_t * retKeyLength, size_t * retDataLength)"
.PP
Iterate through the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
Data items retrieved this way will not be sorted.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key buffer provided by the user to hold the content of the key associated with the first element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the first element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIretKeyLength\fP The actual number of bytes in the key 
.br
\fIretDataLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or PSO_IS_EMPTY if the hash map is empty.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "int psoHashMap::GetNext (void * key, size_t keyLength, void * buffer, size_t bufferLength, size_t * retKeyLength, size_t * retDataLength)"
.PP
Iterate through the hash map. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
Evidently, you must call \fBpsoHashMap::GetFirst\fP to initialize the iterator. Not so evident - calling \fBpsoHashMap::Get\fP will reset the iteration to the data item retrieved by this function (they use the same internal storage). If this cause a problem, please let us know.
.PP
Data items retrieved this way will not be sorted.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key buffer provided by the user to hold the content of the key associated with the data element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the data element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIretKeyLength\fP The actual number of bytes in the key 
.br
\fIretDataLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or PSO_REACHED_THE_END when the iteration reaches the end of the hash map.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoHashMap::Insert (const void * key, size_t keyLength, const void * data, size_t dataLength)"
.PP
Insert a data element in the hash map. 
.PP
The additions only become permanent after a call to psoSession::Commit.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key of the item to be inserted. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIdata\fP The data item to be inserted. 
.br
\fIdataLength\fP The length of \fIdata\fP (in bytes).
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoHashMap::Open (const std::string & hashMapName)"
.PP
Open an existing hash map (see psoSession::CreateObject to create a new object). 
.PP
\fBParameters:\fP
.RS 4
\fIhashMapName\fP The fully qualified name of the hash map.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoHashMap::Open (const char * hashMapName, size_t nameLengthInBytes)"
.PP
Open an existing hash map (see psoSession::CreateObject to create a new object). 
.PP
\fBParameters:\fP
.RS 4
\fIhashMapName\fP The fully qualified name of the hash map. 
.br
\fInameLengthInBytes\fP The length of \fIhashMapName\fP (in bytes) not counting the null terminator.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoHashMap::Replace (const void * key, size_t keyLength, const void * data, size_t dataLength)"
.PP
Replace a data element in the hash map. 
.PP
The replacements only become permanent after a call to psoSession::Commit.
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key of the item to be replaced. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIdata\fP The new data item that will replace the previous data. 
.br
\fIdataLength\fP The length of \fIdata\fP (in bytes).
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoHashMap::Status (psoObjStatus * pStatus)"
.PP
Return the status of the hash map. 
.PP
\fBParameters:\fP
.RS 4
\fIpStatus\fP A pointer to the status structure.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "PSO_HANDLE \fBpsoHashMap::m_objectHandle\fP\fC [private]\fP"
.PP
Pointer to the psoaHashMap struct. 
.PP
Definition at line 251 of file psoHashMap.
.SS "PSO_HANDLE& \fBpsoHashMap::m_sessionHandle\fP\fC [private]\fP"
.PP
Reference to the psoaSession struct (we belong to). 
.PP
Definition at line 254 of file psoHashMap.

.SH "Author"
.PP 
Generated automatically by Doxygen for Photon C++ API from the source code.
