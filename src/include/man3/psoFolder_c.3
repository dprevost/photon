.TH "API functions for Photon folders." 3 "23 Apr 2009" "Version 0.5.0" "Photon Software" \" -*- nroff -*-
.ad l
.nh
.SH NAME
API functions for Photon folders. \- 
.SH "Detailed Description"
.PP 
Folders allow the organization of the data containers in a tree-like structure (similar to a filesystem). 
.PP
If a flat structure is preferred, simply make all your data containers children of the top folder ('\\') - for example, '/MyQueue', '/MyMap', etc. 
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBpsoFolderEntry\fP"
.br
.RI "\fIThis data structure is used to iterate throught all objects in a folder. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderClose\fP (\fBPSO_HANDLE\fP objectHandle)"
.br
.RI "\fIClose a folder. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderCreateFolder\fP (\fBPSO_HANDLE\fP folderHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes)"
.br
.RI "\fICreate a new folder in shared memory as a child of the current folder. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderCreateObject\fP (\fBPSO_HANDLE\fP folderHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP *definition, \fBPSO_HANDLE\fP dataDefHandle)"
.br
.RI "\fICreate a new object in shared memory as a child of the current folder. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderCreateKeyedObject\fP (\fBPSO_HANDLE\fP folderHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP *definition, \fBPSO_HANDLE\fP keyDefHandle, \fBPSO_HANDLE\fP dataDefHandle)"
.br
.RI "\fICreate a new key-based object in shared memory as a child of the current folder. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderDestroyObject\fP (\fBPSO_HANDLE\fP folderHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes)"
.br
.RI "\fIDestroy an object, child of the current folder, in shared memory. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderGetDataDefinition\fP (\fBPSO_HANDLE\fP folderHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP *dataDefHandle)"
.br
.RI "\fIRetrieve the data definition of the named object. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderGetDefinition\fP (\fBPSO_HANDLE\fP folderHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP *definition)"
.br
.RI "\fIRetrieve the object definition of the named object. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderGetFirst\fP (\fBPSO_HANDLE\fP objectHandle, \fBpsoFolderEntry\fP *pEntry)"
.br
.RI "\fIIterate through the folder - no data items are removed from the folder by this function. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderGetKeyDefinition\fP (\fBPSO_HANDLE\fP folderHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP *keyDefHandle)"
.br
.RI "\fIRetrieve the key definition of the named object. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderGetNext\fP (\fBPSO_HANDLE\fP objectHandle, \fBpsoFolderEntry\fP *pEntry)"
.br
.RI "\fIIterate through the folder. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderOpen\fP (\fBPSO_HANDLE\fP sessionHandle, const char *folderName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP *objectHandle)"
.br
.RI "\fIOpen an existing folder (see \fBpsoCreateObject\fP to create a new folder). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFolderStatus\fP (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjStatus\fP *pStatus)"
.br
.RI "\fIReturn the status of the folder. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "PHOTON_EXPORT int psoFolderClose (\fBPSO_HANDLE\fP objectHandle)"
.PP
Close a folder. 
.PP
This function terminates the current access to the folder in shared memory (the folder itself is untouched).
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the folder (see \fBpsoFolderOpen\fP).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFolderCreateFolder (\fBPSO_HANDLE\fP folderHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes)"
.PP
Create a new folder in shared memory as a child of the current folder. 
.PP
The creation of the folder only becomes permanent after a call to \fBpsoCommit\fP.
.PP
This function does not provide a handle to the newly created folder. Use psoFolderOpen to get the handle.
.PP
\fBParameters:\fP
.RS 4
\fIfolderHandle\fP Handle to the current folder. 
.br
\fIobjectName\fP The name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFolderCreateKeyedObject (\fBPSO_HANDLE\fP folderHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP * definition, \fBPSO_HANDLE\fP keyDefHandle, \fBPSO_HANDLE\fP dataDefHandle)"
.PP
Create a new key-based object in shared memory as a child of the current folder. 
.PP
The currently supported types of key-based objects are hash maps and read-only hash maps.
.PP
The creation of the object only becomes permanent after a call to \fBpsoCommit\fP.
.PP
This function does not provide a handle to the newly created object. Use \fBpsoHashMapOpen\fP and similar functions to get the handle.
.PP
\fBParameters:\fP
.RS 4
\fIfolderHandle\fP Handle to the current folder. 
.br
\fIobjectName\fP The name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator. 
.br
\fIdefinition\fP The basic information needed to create the object: the type of object to create, etc. 
.br
\fIkeyDefHandle\fP Handle to the definition of the key. 
.br
\fIdataDefHandle\fP Handle to the definition of the data fields.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFolderCreateObject (\fBPSO_HANDLE\fP folderHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP * definition, \fBPSO_HANDLE\fP dataDefHandle)"
.PP
Create a new object in shared memory as a child of the current folder. 
.PP
To create an object based on a key, use the function \fBpsoFolderCreateKeyedObject\fP instead of the current function.
.PP
The creation of the object only becomes permanent after a call to \fBpsoCommit\fP.
.PP
This function does not provide a handle to the newly created object. Use \fBpsoQueueOpen\fP and similar functions to get the handle.
.PP
\fBParameters:\fP
.RS 4
\fIfolderHandle\fP Handle to the current folder. 
.br
\fIobjectName\fP The name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator. 
.br
\fIdefinition\fP The basic information needed to create the object: the type of object to create, etc. 
.br
\fIdataDefHandle\fP Handle to the definition of the data fields. It can be set to NULL when creating a Folder.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFolderDestroyObject (\fBPSO_HANDLE\fP folderHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes)"
.PP
Destroy an object, child of the current folder, in shared memory. 
.PP
The destruction of the object only becomes permanent after a call to \fBpsoCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIfolderHandle\fP Handle to the current folder. 
.br
\fIobjectName\fP The name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator (null-terminators are not used by the Photon engine).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFolderGetDataDefinition (\fBPSO_HANDLE\fP folderHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP * dataDefHandle)"
.PP
Retrieve the data definition of the named object. 
.PP
To avoid memory leaks, you must close the handle that will be returned by this function (see \fBpsoDataDefClose\fP).
.PP
The handle might be set to NULL by this function if the object is a folder.
.PP
\fBParameters:\fP
.RS 4
\fIfolderHandle\fP Handle to the current folder. 
.br
\fIobjectName\fP The name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator. 
.br
\fIdataDefHandle\fP Handle to the definition of the data fields.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFolderGetDefinition (\fBPSO_HANDLE\fP folderHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP * definition)"
.PP
Retrieve the object definition of the named object. 
.PP
\fBParameters:\fP
.RS 4
\fIfolderHandle\fP Handle to the current folder. 
.br
\fIobjectName\fP The name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator. 
.br
\fIdefinition\fP The definition of the object.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFolderGetFirst (\fBPSO_HANDLE\fP objectHandle, \fBpsoFolderEntry\fP * pEntry)"
.PP
Iterate through the folder - no data items are removed from the folder by this function. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the folder (see \fBpsoFolderOpen\fP). 
.br
\fIpEntry\fP The data structure provided by the user to hold the content of each item in the folder. Memory allocation for this buffer is the responsability of the caller.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFolderGetKeyDefinition (\fBPSO_HANDLE\fP folderHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP * keyDefHandle)"
.PP
Retrieve the key definition of the named object. 
.PP
To avoid memory leaks, you must close the handle that will be returned by this function (see \fBpsoKeyDefClose\fP).
.PP
The handle might be set to NULL by this function if the object does not have keys (folders and queues, for example).
.PP
\fBParameters:\fP
.RS 4
\fIfolderHandle\fP Handle to the current folder. 
.br
\fIobjectName\fP The name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator. 
.br
\fIkeyDefHandle\fP Handle to the key definition(or NULL for folders, queues, etc.).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFolderGetNext (\fBPSO_HANDLE\fP objectHandle, \fBpsoFolderEntry\fP * pEntry)"
.PP
Iterate through the folder. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
Evidently, you must call \fBpsoFolderGetFirst\fP to initialize the iterator.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the folder (see \fBpsoFolderOpen\fP). 
.br
\fIpEntry\fP The data structure provided by the user to hold the content of each item in the folder. Memory allocation for this buffer is the responsability of the caller.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFolderOpen (\fBPSO_HANDLE\fP sessionHandle, const char * folderName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP * objectHandle)"
.PP
Open an existing folder (see \fBpsoCreateObject\fP to create a new folder). 
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP The handle to the current session. 
.br
\fIfolderName\fP The fully qualified name of the folder. 
.br
\fInameLengthInBytes\fP The length of \fIfolderName\fP (in bytes) not counting the null terminator (null-terminators are not used by the Photon engine). 
.br
\fIobjectHandle\fP The handle to the folder, allowing us access to the folder in shared memory. On error, this handle will be set to zero (NULL) unless the objectHandle pointer itself is NULL.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFolderStatus (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjStatus\fP * pStatus)"
.PP
Return the status of the folder. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the folder (see \fBpsoFolderOpen\fP). 
.br
\fIpStatus\fP A pointer to the status structure.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

