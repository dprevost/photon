.TH "psoFolder" 3 "26 Aug 2008" "Version 0.3" "Photon C++ API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
psoFolder \- 
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
Definition at line 33 of file psoFolder.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBpsoFolder\fP (psoSession &session)"
.br
.ti -1c
.RI "virtual \fB~psoFolder\fP ()"
.br
.ti -1c
.RI "void \fBClose\fP ()"
.br
.RI "\fIClose a folder. \fP"
.ti -1c
.RI "void \fBCreateObject\fP (const std::string &objectName, psoObjectDefinition *pDefinition)"
.br
.RI "\fICreate a new object in shared memory as a child of the current folder. \fP"
.ti -1c
.RI "void \fBCreateObject\fP (const char *objectName, size_t nameLengthInBytes, psoObjectDefinition *pDefinition)"
.br
.RI "\fICreate a new object in shared memory as a child of the current folder. \fP"
.ti -1c
.RI "void \fBCreateObjectXML\fP (const std::string &xmlBuffer)"
.br
.RI "\fICreate a new object in shared memory as a child of the current folder. \fP"
.ti -1c
.RI "void \fBCreateObjectXML\fP (const char *xmlBuffer, size_t lengthInBytes)"
.br
.RI "\fICreate a new object in shared memory as a child of the current folder. \fP"
.ti -1c
.RI "void \fBDestroyObject\fP (const std::string &objectName)"
.br
.RI "\fIDestroy an object, child of the current folder, in shared memory. \fP"
.ti -1c
.RI "void \fBDestroyObject\fP (const char *objectName, size_t nameLengthInBytes)"
.br
.RI "\fIDestroy an object, child of the current folder, in shared memory. \fP"
.ti -1c
.RI "int \fBGetFirst\fP (psoFolderEntry *pEntry)"
.br
.RI "\fIIterate through the folder - no data items are removed from the folder by this function. \fP"
.ti -1c
.RI "int \fBGetNext\fP (psoFolderEntry *pEntry)"
.br
.RI "\fIIterate through the folder. \fP"
.ti -1c
.RI "void \fBOpen\fP (const std::string &folderName)"
.br
.RI "\fIOpen an existing folder (see psoSession::CreateObject to create a new folder). \fP"
.ti -1c
.RI "void \fBOpen\fP (const char *folderName, size_t nameLengthInBytes)"
.br
.RI "\fIOpen an existing folder (see psoSession::CreateObject to create a new folder). \fP"
.ti -1c
.RI "void \fBStatus\fP (psoObjStatus *pStatus)"
.br
.RI "\fIReturn the status of the folder. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "PSO_HANDLE \fBm_objectHandle\fP"
.br
.RI "\fIPointer to the psaFolder struct. \fP"
.ti -1c
.RI "PSO_HANDLE & \fBm_sessionHandle\fP"
.br
.RI "\fIReference to the psaSession struct (we belong to). \fP"
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "psoFolder::psoFolder (psoSession & session)"
.PP
.SS "virtual psoFolder::~psoFolder ()\fC [virtual]\fP"
.PP
.SH "Member Function Documentation"
.PP 
.SS "void psoFolder::Close ()"
.PP
Close a folder. 
.PP
This function terminates the current access to the folder in shared memory (the folder itself is untouched).
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoFolder::CreateObject (const std::string & objectName, psoObjectDefinition * pDefinition)"
.PP
Create a new object in shared memory as a child of the current folder. 
.PP
The creation of the object only becomes permanent after a call to psoSession::psoCommit.
.PP
This function does not provide a handle or an object to the newly created shared-memory object. Use psoQueue::Open and similar functions to access them.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The name of the object. 
.br
\fIpDefinition\fP The type of object to create (folder, queue, etc.) and the 'optional' definition.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoFolder::CreateObject (const char * objectName, size_t nameLengthInBytes, psoObjectDefinition * pDefinition)"
.PP
Create a new object in shared memory as a child of the current folder. 
.PP
The creation of the object only becomes permanent after a call to psoSession::psoCommit.
.PP
This function does not provide a handle or an object to the newly created shared-memory object. Use psoQueue::Open and similar functions to access them.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator. 
.br
\fIpDefinition\fP The type of object to create (folder, queue, etc.) and the 'optional' definition.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoFolder::CreateObjectXML (const std::string & xmlBuffer)"
.PP
Create a new object in shared memory as a child of the current folder. 
.PP
The creation of the object only becomes permanent after a call to psoSession::psoCommit.
.PP
This function does not provide a handle or an object to the newly created shared-memory object. Use psoQueue::Open and similar functions to access them.
.PP
\fBParameters:\fP
.RS 4
\fIxmlBuffer\fP The XML buffer containing all the required information.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoFolder::CreateObjectXML (const char * xmlBuffer, size_t lengthInBytes)"
.PP
Create a new object in shared memory as a child of the current folder. 
.PP
The creation of the object only becomes permanent after a call to psoSession::psoCommit.
.PP
This function does not provide a handle or an object to the newly created shared-memory object. Use psoQueue::Open and similar functions to access them.
.PP
\fBParameters:\fP
.RS 4
\fIxmlBuffer\fP The XML buffer (string) containing all the required information. 
.br
\fIlengthInBytes\fP The length of \fIxmlBuffer\fP (in bytes) not counting the null terminator.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoFolder::DestroyObject (const std::string & objectName)"
.PP
Destroy an object, child of the current folder, in shared memory. 
.PP
The destruction of the object only becomes permanent after a call to psoSession::psoCommit.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The name of the object.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoFolder::DestroyObject (const char * objectName, size_t nameLengthInBytes)"
.PP
Destroy an object, child of the current folder, in shared memory. 
.PP
The destruction of the object only becomes permanent after a call to psoSession::psoCommit.
.PP
\fBParameters:\fP
.RS 4
\fIobjectName\fP The name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "int psoFolder::GetFirst (psoFolderEntry * pEntry)"
.PP
Iterate through the folder - no data items are removed from the folder by this function. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
\fBParameters:\fP
.RS 4
\fIpEntry\fP The data structure provided by the user to hold the content of each item in the folder. Memory allocation for this buffer is the responsability of the caller.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or PSO_IS_EMPTY if the folder is empty.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "int psoFolder::GetNext (psoFolderEntry * pEntry)"
.PP
Iterate through the folder. 
.PP
Data items which were added by another session and are not yet committed will not be seen by the iterator. Likewise, destroyed data items (even if not yet committed) are invisible.
.PP
Evidently, you must call \fBpsoFolder::GetFirst\fP to initialize the iterator.
.PP
\fBParameters:\fP
.RS 4
\fIpEntry\fP The data structure provided by the user to hold the content of each item in the folder. Memory allocation for this buffer is the responsability of the caller.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or PSO_REACHED_THE_END when the iteration reaches the end of the folder.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoFolder::Open (const std::string & folderName)"
.PP
Open an existing folder (see psoSession::CreateObject to create a new folder). 
.PP
\fBParameters:\fP
.RS 4
\fIfolderName\fP The fully qualified name of the folder.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoFolder::Open (const char * folderName, size_t nameLengthInBytes)"
.PP
Open an existing folder (see psoSession::CreateObject to create a new folder). 
.PP
\fBParameters:\fP
.RS 4
\fIfolderName\fP The fully qualified name of the folder. 
.br
\fInameLengthInBytes\fP The length of \fIfolderName\fP (in bytes) not counting the null terminator.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SS "void psoFolder::Status (psoObjStatus * pStatus)"
.PP
Return the status of the folder. 
.PP
\fBParameters:\fP
.RS 4
\fIpStatus\fP A pointer to the status structure.
.RE
.PP
\fBExceptions:\fP
.RS 4
\fIpsoException\fP An abnormal error occured. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "PSO_HANDLE \fBpsoFolder::m_objectHandle\fP\fC [private]\fP"
.PP
Pointer to the psaFolder struct. 
.PP
Definition at line 231 of file psoFolder.
.SS "PSO_HANDLE& \fBpsoFolder::m_sessionHandle\fP\fC [private]\fP"
.PP
Reference to the psaSession struct (we belong to). 
.PP
Definition at line 234 of file psoFolder.

.SH "Author"
.PP 
Generated automatically by Doxygen for Photon C++ API from the source code.
