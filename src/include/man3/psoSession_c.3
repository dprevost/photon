.TH "API functions for Photon sessions." 3 "23 Apr 2009" "Version 0.5.0" "Photon Software" \" -*- nroff -*-
.ad l
.nh
.SH NAME
API functions for Photon sessions. \- 
.SH "Detailed Description"
.PP 
Sessions exist mainly to support multi-threaded (MT) programs. 
.PP
Best practices: 
.PD 0

.IP "\(bu" 2
Each thread of an MT program should have its own session, making it independent of the other threads. 
.PP

.IP "\(bu" 2
If you need to open the same Photon object in multiple threads, simply open it multiple times using a different session for each thread. The overhead of having multiple handles to the same shared-memory data container is minimal and using this technique instead of using multi-thread locks increases the overall performance of the software.  
.IP "\(bu" 2
If you cannot use this, you must implement your own thread synchronization mecanism.  
.IP "\(bu" 2
Signal handlers (and similar calls): you should not call \fBpsoExit\fP or \fBpsoExitSession\fP (or similar) from a signal handler. Instead, some global flags should be set that will allow each session to terminate in an orderly fashion.  
.PP
.PP
Additional note: API objects (or C handles) are just proxies for the real objects sitting in shared memory. Proper synchronization is already done in shared memory and it is best to avoid the additional synchronization of these proxy objects. 
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoCommit\fP (\fBPSO_HANDLE\fP sessionHandle)"
.br
.RI "\fICommit all insertions and deletions (of the current session) executed since the previous call to psoCommit or psoRollback. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoCreateFolder\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes)"
.br
.RI "\fICreate a new folder in shared memory. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoCreateObject\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP *definition, \fBPSO_HANDLE\fP dataDefHandle)"
.br
.RI "\fICreate a new object in shared memory. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoCreateKeyedObject\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP *definition, \fBPSO_HANDLE\fP keyDefHandle, \fBPSO_HANDLE\fP dataDefHandle)"
.br
.RI "\fICreate a new key-based object in shared memory. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoDestroyObject\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes)"
.br
.RI "\fIDestroy an existing object in shared memory. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoErrorMsg\fP (\fBPSO_HANDLE\fP sessionHandle, char *message, \fBpsoUint32\fP msgLengthInBytes)"
.br
.RI "\fIReturn the error message associated with the last error(s). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoExitSession\fP (\fBPSO_HANDLE\fP sessionHandle)"
.br
.RI "\fITerminate the current session. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoGetDataDefinition\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP *dataDefHandle)"
.br
.RI "\fIRetrieve the data definition of the named object. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoGetDefinition\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP *definition)"
.br
.RI "\fIRetrieve the object definition of the named object. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoGetInfo\fP (\fBPSO_HANDLE\fP sessionHandle, \fBpsoInfo\fP *pInfo)"
.br
.RI "\fIReturn information on the current status of the shared memory. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoGetKeyDefinition\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP *keyDefHandle)"
.br
.RI "\fIRetrieve the key definition of the named object. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoGetStatus\fP (\fBPSO_HANDLE\fP sessionHandle, const char *objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjStatus\fP *pStatus)"
.br
.RI "\fIReturn the status of the named object. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoInitSession\fP (\fBPSO_HANDLE\fP *sessionHandle)"
.br
.RI "\fIThis function initializes a session. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoLastError\fP (\fBPSO_HANDLE\fP sessionHandle)"
.br
.RI "\fIReturn the last error seen in previous calls (of the current session). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoRollback\fP (\fBPSO_HANDLE\fP sessionHandle)"
.br
.RI "\fIRollback all insertions and deletions (of the current session) executed since the previous call to psoCommit or psoRollback. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "PHOTON_EXPORT int psoCommit (\fBPSO_HANDLE\fP sessionHandle)"
.PP
Commit all insertions and deletions (of the current session) executed since the previous call to psoCommit or psoRollback. 
.PP
Insertions and deletions subjected to this call include both data items inserted, replaced and deleted from data containers (maps, etc.) and the objects themselves created, for example, with \fBpsoCreateObject\fP and/or destroyed with \fBpsoDestroyObject\fP.
.PP
Note: the internal calls executed by the engine to satisfy this request cannot fail. As such, you cannot find yourself with an ugly situation where some operations were committed and others not. If an error is returned by this function, nothing was committed.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoCreateFolder (\fBPSO_HANDLE\fP sessionHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes)"
.PP
Create a new folder in shared memory. 
.PP
The creation of the folder only becomes permanent after a call to \fBpsoCommit\fP.
.PP
This function does not provide a handle to the newly created folder. Use \fBpsoFolderOpen\fP to get the handle.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoCreateKeyedObject (\fBPSO_HANDLE\fP sessionHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP * definition, \fBPSO_HANDLE\fP keyDefHandle, \fBPSO_HANDLE\fP dataDefHandle)"
.PP
Create a new key-based object in shared memory. 
.PP
The currently supported types of key-based objects are hash maps and read-only hash maps.
.PP
The creation of the object only becomes permanent after a call to \fBpsoCommit\fP.
.PP
This function does not provide a handle to the newly created object. Use \fBpsoHashMapOpen\fP and similar functions to get the handle.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator. 
.br
\fIdefinition\fP The basic information needed to create the object: the type of object to create, etc. 
.br
\fIkeyDefHandle\fP Handle to the definition of the key. 
.br
\fIdataDefHandle\fP Handle to the definition of the data fields.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoCreateObject (\fBPSO_HANDLE\fP sessionHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP * definition, \fBPSO_HANDLE\fP dataDefHandle)"
.PP
Create a new object in shared memory. 
.PP
To create an object based on a key, use the function \fBpsoCreateKeyedObject\fP instead of the current function.
.PP
The creation of the object only becomes permanent after a call to \fBpsoCommit\fP.
.PP
This function does not provide a handle to the newly created object. Use \fBpsoQueueOpen\fP and similar functions to get the handle.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator. 
.br
\fIdefinition\fP The basic information needed to create the object: the type of object to create, etc. 
.br
\fIdataDefHandle\fP Handle to the definition of the data fields. It can be set to NULL when creating a Folder.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoDestroyObject (\fBPSO_HANDLE\fP sessionHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes)"
.PP
Destroy an existing object in shared memory. 
.PP
The destruction of the object only becomes permanent after a call to \fBpsoCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator (null-terminators are not used by the Photon engine).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoErrorMsg (\fBPSO_HANDLE\fP sessionHandle, char * message, \fBpsoUint32\fP msgLengthInBytes)"
.PP
Return the error message associated with the last error(s). 
.PP
If the length of the error message is greater than the length of the provided buffer, the error message will be truncated to fit in the provided buffer.
.PP
Caveat, some basic errors cannot be captured, if the provided handles (session handles or object handles) are incorrect (NULL, for example). Without a proper handle, the code cannot know where to store the error...
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fImessage\fP Buffer for the error message. Memory allocation for this buffer is the responsability of the caller. 
.br
\fImsgLengthInBytes\fP The length of \fImessage\fP (in bytes). Must be at least 32 bytes.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoExitSession (\fBPSO_HANDLE\fP sessionHandle)"
.PP
Terminate the current session. 
.PP
An implicit call to \fBpsoRollback\fP is executed by this function.
.PP
Once this function is executed, attempts to use the session handle or the handles of objects accessed using this session might lead to memory violation (and, possibly, crashes).
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoGetDataDefinition (\fBPSO_HANDLE\fP sessionHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP * dataDefHandle)"
.PP
Retrieve the data definition of the named object. 
.PP
To avoid memory leaks, you must close the handle that will be returned by this function (see \fBpsoDataDefClose\fP).
.PP
The handle might be set to NULL by this function if the object is a folder.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator (null-terminators are not used by the Photon engine). 
.br
\fIdataDefHandle\fP Handle to the definition of the data fields (or NULL for folders).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoGetDefinition (\fBPSO_HANDLE\fP sessionHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjectDefinition\fP * definition)"
.PP
Retrieve the object definition of the named object. 
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator. 
.br
\fIdefinition\fP The definition of the object.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoGetInfo (\fBPSO_HANDLE\fP sessionHandle, \fBpsoInfo\fP * pInfo)"
.PP
Return information on the current status of the shared memory. 
.PP
The fetched information is mainly about the current status of the memory allocator and information needed to provide better support (compiler, etc.).
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIpInfo\fP A pointer to the \fBpsoInfo\fP structure.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoGetKeyDefinition (\fBPSO_HANDLE\fP sessionHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP * keyDefHandle)"
.PP
Retrieve the key definition of the named object. 
.PP
To avoid memory leaks, you must close the handle that will be returned by this function (see \fBpsoKeyDefClose\fP).
.PP
The handle might be set to NULL by this function if the object does not have keys (folders and queues, for example).
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator (null-terminators are not used by the Photon engine). 
.br
\fIkeyDefHandle\fP Handle to the key definition (or NULL for folders, queues, etc.).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoGetStatus (\fBPSO_HANDLE\fP sessionHandle, const char * objectName, \fBpsoUint32\fP nameLengthInBytes, \fBpsoObjStatus\fP * pStatus)"
.PP
Return the status of the named object. 
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator (null-terminators are not used by the Photon engine). 
.br
\fIpStatus\fP A pointer to the \fBpsoObjStatus\fP structure.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoInitSession (\fBPSO_HANDLE\fP * sessionHandle)"
.PP
This function initializes a session. 
.PP
It takes one output argument, the session handle.
.PP
Upon successful completion, the session handle is set and the function returns zero. Otherwise the error code is returned and the handle is set to NULL.
.PP
This function will also initiate a new transaction.
.PP
Upon normal termination, the current transaction is rolled back. You MUST explicitly call psonCommit to save your changes.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP The handle to the newly created session.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoLastError (\fBPSO_HANDLE\fP sessionHandle)"
.PP
Return the last error seen in previous calls (of the current session). 
.PP
Caveat, some basic errors cannot be captured, if the provided handles (session handles or object handles) are incorrect (NULL, for example). Without a proper handle, the code cannot know where to store the error...
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session.
.RE
.PP
\fBReturns:\fP
.RS 4
The last error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoRollback (\fBPSO_HANDLE\fP sessionHandle)"
.PP
Rollback all insertions and deletions (of the current session) executed since the previous call to psoCommit or psoRollback. 
.PP
Insertions and deletions subjected to this call include both data items inserted and deleted from data containers (maps, etc.) and objects themselves created with psoCreateObj and/or destroyed with psoDestroyObj.
.PP
Note: the internal calls executed by the engine to satisfy this request cannot fail. As such, you cannot find yourself with an ugly situation where some operations were rollbacked and others not. If an error is returned by this function, nothing was rollbacked.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

