.TH "psoCommon.h" 3 "25 Jun 2009" "Version 0.5.0" "Photon Software" \" -*- nroff -*-
.ad l
.nh
.SH NAME
psoCommon.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdlib.h>\fP
.br
\fC#include <stdint.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBpsoObjectDefinition\fP"
.br
.RI "\fIThis struct contains the basic elements defining an object (type, number of fields, etc). \fP"
.ti -1c
.RI "struct \fBpsoFolderEntry\fP"
.br
.RI "\fIThis data structure is used to iterate throught all objects in a folder. \fP"
.ti -1c
.RI "struct \fBpsoObjStatus\fP"
.br
.RI "\fIThis data structure is used to retrieve the status of objects. \fP"
.ti -1c
.RI "struct \fBpsoInfo\fP"
.br
.RI "\fIThis data structure is used to retrieve the status of the Photon shared memory. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBPHOTON_EXPORT\fP"
.br
.RI "\fIUses to tell the VC++ compiler to export/import a function or variable on Windows (the macro is empty on other platforms). \fP"
.ti -1c
.RI "#define \fBPSO_MAX_NAME_LENGTH\fP   256"
.br
.RI "\fIMaximum number of bytes of the name of a pso object (not counting the name of the parent folder(s)). \fP"
.ti -1c
.RI "#define \fBPSO_MAX_FULL_NAME_LENGTH\fP   1024"
.br
.RI "\fIMaximum number of bytes of the fully qualified name of a pso object (including the name(s) of its parent folder(s)). \fP"
.ti -1c
.RI "#define \fBPSO_MULTIPLE_DATA_DEFINITIONS\fP   0x0001"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef int16_t \fBpsoInt16\fP"
.br
.ti -1c
.RI "typedef uint16_t \fBpsoUint16\fP"
.br
.ti -1c
.RI "typedef uint32_t \fBpsoUint32\fP"
.br
.ti -1c
.RI "typedef void * \fBPSO_HANDLE\fP"
.br
.RI "\fIPSO_HANDLE is an opaque data type used by the C API to reference objects created in the API module. \fP"
.ti -1c
.RI "typedef enum \fBpsoObjectType\fP \fBpsoObjectType\fP"
.br
.ti -1c
.RI "typedef enum \fBpsoIteratorType\fP \fBpsoIteratorType\fP"
.br
.ti -1c
.RI "typedef struct \fBpsoObjectDefinition\fP \fBpsoObjectDefinition\fP"
.br
.ti -1c
.RI "typedef struct \fBpsoFolderEntry\fP \fBpsoFolderEntry\fP"
.br
.ti -1c
.RI "typedef struct \fBpsoObjStatus\fP \fBpsoObjStatus\fP"
.br
.ti -1c
.RI "typedef struct \fBpsoInfo\fP \fBpsoInfo\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBpsoObjectType\fP { \fBPSO_FOLDER\fP =  1, \fBPSO_LIFO\fP =  2, \fBPSO_QUEUE\fP =  3, \fBPSO_HASH_MAP\fP =  4, \fBPSO_FAST_MAP\fP =  5, \fBPSO_LAST_OBJECT_TYPE\fP }"
.br
.RI "\fIThe object type as seen from the API. \fP"
.ti -1c
.RI "enum \fBpsoIteratorType\fP { \fBPSO_FIRST\fP =  1, \fBPSO_NEXT\fP =  2 }"
.br
.ti -1c
.RI "enum \fBpsoDefinitionType\fP { \fBPSO_DEF_FIRST_TYPE\fP =  1, \fBPSO_DEF_NONE\fP, \fBPSO_DEF_USER_DEFINED\fP, \fBPSO_DEF_PHOTON_ODBC_SIMPLE\fP, \fBPSO_DEF_PROTO_BUF\fP, \fBPSO_DEF_LAST_TYPE\fP }"
.br
.RI "\fIPhoton supported definitions for both keys and data fields. \fP"
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define PHOTON_EXPORT"
.PP
Uses to tell the VC++ compiler to export/import a function or variable on Windows (the macro is empty on other platforms). 
.PP
Definition at line 60 of file psoCommon.h.
.SS "#define PSO_MAX_FULL_NAME_LENGTH   1024"
.PP
Maximum number of bytes of the fully qualified name of a pso object (including the name(s) of its parent folder(s)). 
.PP
Definition at line 89 of file psoCommon.h.
.SS "#define PSO_MAX_NAME_LENGTH   256"
.PP
Maximum number of bytes of the name of a pso object (not counting the name of the parent folder(s)). 
.PP
Definition at line 83 of file psoCommon.h.
.SS "#define PSO_MULTIPLE_DATA_DEFINITIONS   0x0001"
.PP
Definition at line 116 of file psoCommon.h.
.SH "Typedef Documentation"
.PP 
.SS "typedef void* \fBPSO_HANDLE\fP"
.PP
PSO_HANDLE is an opaque data type used by the C API to reference objects created in the API module. 
.PP
Definition at line 75 of file psoCommon.h.
.SS "typedef struct \fBpsoFolderEntry\fP \fBpsoFolderEntry\fP"
.PP
Definition at line 242 of file psoCommon.h.
.SS "typedef struct \fBpsoInfo\fP \fBpsoInfo\fP"
.PP
Definition at line 341 of file psoCommon.h.
.SS "typedef int16_t \fBpsoInt16\fP"
.PP
Definition at line 40 of file psoCommon.h.
.SS "typedef enum \fBpsoIteratorType\fP \fBpsoIteratorType\fP"
.PP
Definition at line 114 of file psoCommon.h.
.SS "typedef struct \fBpsoObjectDefinition\fP \fBpsoObjectDefinition\fP"
.PP
Definition at line 213 of file psoCommon.h.
.SS "typedef enum \fBpsoObjectType\fP \fBpsoObjectType\fP"
.PP
Definition at line 106 of file psoCommon.h.
.SS "typedef struct \fBpsoObjStatus\fP \fBpsoObjStatus\fP"
.PP
Definition at line 281 of file psoCommon.h.
.SS "typedef uint16_t \fBpsoUint16\fP"
.PP
Definition at line 41 of file psoCommon.h.
.SS "typedef uint32_t \fBpsoUint32\fP"
.PP
Definition at line 42 of file psoCommon.h.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBpsoDefinitionType\fP"
.PP
Photon supported definitions for both keys and data fields. 
.PP
Definitions are not used by the core engine - the engine manipulates both the keys and the data records as arrays of bytes.
.PP
They are however essential at the interface level, mainly for object oriented languages, to transform your objects to an array of bytes and back.
.PP
Definitions can be divided in two categories, one where all the data fields have a fixed length (the last field can vary in size). This is ideal for mapping a data record (or key) to C and COBOL and can also be used by C
.PP
and one where the length of a data field is unknown (a Java string, for example).
.PP
Photon fully supports the first type natively by providing 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIPSO_DEF_FIRST_TYPE \fP\fP
First type (for boundary checking). 
.TP
\fB\fIPSO_DEF_NONE \fP\fP
No type (no key type for queues, for example). 
.TP
\fB\fIPSO_DEF_USER_DEFINED \fP\fP
User-defined. 
.TP
\fB\fIPSO_DEF_PHOTON_ODBC_SIMPLE \fP\fP
A simplified version of ODBC. 
.PP
The fields must all have a fixed length except for the last one. This condition makes it easy to map the data record with a C struct. 
.TP
\fB\fIPSO_DEF_PROTO_BUF \fP\fP
Google Protocol Buffer. 
.TP
\fB\fIPSO_DEF_LAST_TYPE \fP\fP
Last type (for boundary checking). 
.PP
Definition at line 138 of file psoCommon.h.
.SS "enum \fBpsoIteratorType\fP"
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIPSO_FIRST \fP\fP
.TP
\fB\fIPSO_NEXT \fP\fP

.PP
Definition at line 108 of file psoCommon.h.
.SS "enum \fBpsoObjectType\fP"
.PP
The object type as seen from the API. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIPSO_FOLDER \fP\fP
.TP
\fB\fIPSO_LIFO \fP\fP
.TP
\fB\fIPSO_QUEUE \fP\fP
.TP
\fB\fIPSO_HASH_MAP \fP\fP
.TP
\fB\fIPSO_FAST_MAP \fP\fP
.TP
\fB\fIPSO_LAST_OBJECT_TYPE \fP\fP

.PP
Definition at line 96 of file psoCommon.h.
.SH "Author"
.PP 
Generated automatically by Doxygen for Photon Software from the source code.
