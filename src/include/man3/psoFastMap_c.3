.TH "API functions for Photon read-only hash maps." 3 "11 Dec 2008" "Version 0.4.0" "Photon Software" \" -*- nroff -*-
.ad l
.nh
.SH NAME
API functions for Photon read-only hash maps. \- 
.SH "Detailed Description"
.PP 
The features of fast maps are very similar to the features of standard hash maps with one major exception - no locks are required to access the data and special procedures are implemented for the occasional updates:. 
.PP
.PD 0
.IP "1." 4
when a map is open in read-only mode (\fBpsoFastMapOpen\fP), the end-of-this-unit-of-work calls (\fBpsoCommit\fP, \fBpsoRollback\fP) will check if a new version of the map exist and if indeed this is the case, the new version will be use instead of the old one. 
.PP

.IP "2." 4
when a map is open for editing (\fBpsoFastMapEdit\fP) a working copy of the map is created in shared memory and the map can be updated (no locks again since only the updater can access the working copy). When the session is committed, the working version becomes the latest version and can be open/accessed by readers. And, of course, the same procedure applies if you have a set of maps that must be changed together.
.PP
If \fBpsoRollback\fP is called, all changes done to the working copy are erased.  
.PP
.PP
Note: the old versions are removed from memory when all readers have updated their versions. Even if a program is only doing read access to shared-memory data, it is important to add \fBpsoCommit\fP once in a while to refresh the 'handles' periodically. 
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapClose\fP (\fBPSO_HANDLE\fP objectHandle)"
.br
.RI "\fIClose a Hash Map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapDefinition\fP (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjectDefinition\fP *definition, \fBpsoUint32\fP numFields, \fBpsoFieldDefinition\fP *fields)"
.br
.RI "\fIRetrieve the data definition of the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapDelete\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, \fBpsoUint32\fP keyLength)"
.br
.RI "\fIRemove the data item identified by the given key from the hash map (you must be in edit mode). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapEdit\fP (\fBPSO_HANDLE\fP sessionHandle, const char *hashMapName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP *objectHandle)"
.br
.RI "\fIOpen a temporary copy of an existing hash map for editing. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapEmpty\fP (\fBPSO_HANDLE\fP objectHandle)"
.br
.RI "\fIRemove all data items from the map (you must be in edit mode). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapGet\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, \fBpsoUint32\fP keyLength, void *buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP *returnedLength)"
.br
.RI "\fIRetrieve the data item identified by the given key from the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapGetFirst\fP (\fBPSO_HANDLE\fP objectHandle, void *key, \fBpsoUint32\fP keyLength, void *buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP *retKeyLength, \fBpsoUint32\fP *retDataLength)"
.br
.RI "\fIIterate through the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapGetNext\fP (\fBPSO_HANDLE\fP objectHandle, void *key, \fBpsoUint32\fP keyLength, void *buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP *retKeyLength, \fBpsoUint32\fP *retDataLength)"
.br
.RI "\fIIterate through the hash map. \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapInsert\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, \fBpsoUint32\fP keyLength, const void *data, \fBpsoUint32\fP dataLength)"
.br
.RI "\fIInsert a data element in the hash map (you must be in edit mode). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapOpen\fP (\fBPSO_HANDLE\fP sessionHandle, const char *hashMapName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP *objectHandle)"
.br
.RI "\fIOpen an existing hash map read only (see \fBpsoCreateObject\fP to create a new object). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapReplace\fP (\fBPSO_HANDLE\fP objectHandle, const void *key, \fBpsoUint32\fP keyLength, const void *data, \fBpsoUint32\fP dataLength)"
.br
.RI "\fIReplace a data element in the hash map (you must be in edit mode). \fP"
.ti -1c
.RI "PHOTON_EXPORT int \fBpsoFastMapStatus\fP (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjStatus\fP *pStatus)"
.br
.RI "\fIReturn the status of the hash map. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "PHOTON_EXPORT int psoFastMapClose (\fBPSO_HANDLE\fP objectHandle)"
.PP
Close a Hash Map. 
.PP
This function terminates the current access to the hash map in shared memory (the hash map itself is untouched).
.PP
\fBWarning:\fP
.RS 4
Closing an object does not automatically commit or rollback data items that were inserted or removed (if the map was open with \fBpsoFastMapEdit\fP). You still must use either \fBpsoCommit\fP or \fBpsoRollback\fP to end the current unit of work.
.RE
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoFastMapOpen\fP or \fBpsoFastMapEdit\fP). 
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFastMapDefinition (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjectDefinition\fP * definition, \fBpsoUint32\fP numFields, \fBpsoFieldDefinition\fP * fields)"
.PP
Retrieve the data definition of the hash map. 
.PP
You can call this function twice - the first time with numFields set to \fIzero\fP and \fIfields\fP set to NULL to retrieve the actual number of fields. This allows you to allocate the proper size for \fIfields\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoFastMapOpen\fP or \fBpsoFastMapEdit\fP). 
.br
\fIdefinition\fP The definition of the object. 
.br
\fInumFields\fP The length of the array \fIfields\fP. Can be set to zero to get the actual number of fields. 
.br
\fIfields\fP The definition of all the fields. It can be set to NULL if \fInumFields\fP is set to zero.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFastMapDelete (\fBPSO_HANDLE\fP objectHandle, const void * key, \fBpsoUint32\fP keyLength)"
.PP
Remove the data item identified by the given key from the hash map (you must be in edit mode). 
.PP
The removals only become permanent after a call to \fBpsoCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoFastMapEdit\fP). 
.br
\fIkey\fP The key of the item to be removed. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFastMapEdit (\fBPSO_HANDLE\fP sessionHandle, const char * hashMapName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP * objectHandle)"
.PP
Open a temporary copy of an existing hash map for editing. 
.PP
The copy becomes the latest version of the map when a session is committed.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP The handle to the current session. 
.br
\fIhashMapName\fP The fully qualified name of the hash map. 
.br
\fInameLengthInBytes\fP The length of \fIhashMapName\fP (in bytes) not counting the null terminator (null-terminators are not used by the Photon engine). 
.br
\fIobjectHandle\fP The handle to the hash map, allowing us access to the map in shared memory. On error, this handle will be set to zero (NULL) unless the objectHandle pointer itself is NULL.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFastMapEmpty (\fBPSO_HANDLE\fP objectHandle)"
.PP
Remove all data items from the map (you must be in edit mode). 
.PP
The removals only become permanent after a call to \fBpsoCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoFastMapEdit\fP).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFastMapGet (\fBPSO_HANDLE\fP objectHandle, const void * key, \fBpsoUint32\fP keyLength, void * buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP * returnedLength)"
.PP
Retrieve the data item identified by the given key from the hash map. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoFastMapOpen\fP or \fBpsoFastMapEdit\fP). 
.br
\fIkey\fP The key of the item to be retrieved. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the data item. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIreturnedLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFastMapGetFirst (\fBPSO_HANDLE\fP objectHandle, void * key, \fBpsoUint32\fP keyLength, void * buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP * retKeyLength, \fBpsoUint32\fP * retDataLength)"
.PP
Iterate through the hash map. 
.PP
Data items retrieved this way will not be sorted.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoFastMapOpen\fP or \fBpsoFastMapEdit\fP). 
.br
\fIkey\fP The key buffer provided by the user to hold the content of the key associated with the first element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the first element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIretKeyLength\fP The actual number of bytes in the key 
.br
\fIretDataLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFastMapGetNext (\fBPSO_HANDLE\fP objectHandle, void * key, \fBpsoUint32\fP keyLength, void * buffer, \fBpsoUint32\fP bufferLength, \fBpsoUint32\fP * retKeyLength, \fBpsoUint32\fP * retDataLength)"
.PP
Iterate through the hash map. 
.PP
Evidently, you must call \fBpsoFastMapGetFirst\fP to initialize the iterator. Not so evident - calling \fBpsoFastMapGet\fP will reset the iteration to the data item retrieved by this function (they use the same internal storage). If this cause a problem, please let us know.
.PP
Data items retrieved this way will not be sorted.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoFastMapOpen\fP or \fBpsoFastMapEdit\fP). 
.br
\fIkey\fP The key buffer provided by the user to hold the content of the key associated with the data element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIbuffer\fP The buffer provided by the user to hold the content of the data element. Memory allocation for this buffer is the responsability of the caller. 
.br
\fIbufferLength\fP The length of \fIbuffer\fP (in bytes). 
.br
\fIretKeyLength\fP The actual number of bytes in the key 
.br
\fIretDataLength\fP The actual number of bytes in the data item.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFastMapInsert (\fBPSO_HANDLE\fP objectHandle, const void * key, \fBpsoUint32\fP keyLength, const void * data, \fBpsoUint32\fP dataLength)"
.PP
Insert a data element in the hash map (you must be in edit mode). 
.PP
The additions only become permanent after a call to \fBpsoCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoFastMapEdit\fP). 
.br
\fIkey\fP The key of the item to be inserted. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIdata\fP The data item to be inserted. 
.br
\fIdataLength\fP The length of \fIdata\fP (in bytes).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFastMapOpen (\fBPSO_HANDLE\fP sessionHandle, const char * hashMapName, \fBpsoUint32\fP nameLengthInBytes, \fBPSO_HANDLE\fP * objectHandle)"
.PP
Open an existing hash map read only (see \fBpsoCreateObject\fP to create a new object). 
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP The handle to the current session. 
.br
\fIhashMapName\fP The fully qualified name of the hash map. 
.br
\fInameLengthInBytes\fP The length of \fIhashMapName\fP (in bytes) not counting the null terminator (null-terminators are not used by the Photon engine). 
.br
\fIobjectHandle\fP The handle to the hash map, allowing us access to the map in shared memory. On error, this handle will be set to zero (NULL) unless the objectHandle pointer itself is NULL.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFastMapReplace (\fBPSO_HANDLE\fP objectHandle, const void * key, \fBpsoUint32\fP keyLength, const void * data, \fBpsoUint32\fP dataLength)"
.PP
Replace a data element in the hash map (you must be in edit mode). 
.PP
The replacements only become permanent after a call to \fBpsoCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoFastMapEdit\fP). 
.br
\fIkey\fP The key of the item to be replaced. 
.br
\fIkeyLength\fP The length of the \fIkey\fP buffer (in bytes). 
.br
\fIdata\fP The new data item that will replace the previous data. 
.br
\fIdataLength\fP The length of \fIdata\fP (in bytes).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

.SS "PHOTON_EXPORT int psoFastMapStatus (\fBPSO_HANDLE\fP objectHandle, \fBpsoObjStatus\fP * pStatus)"
.PP
Return the status of the hash map. 
.PP
\fBParameters:\fP
.RS 4
\fIobjectHandle\fP The handle to the hash map (see \fBpsoFastMapOpen\fP or \fBpsoFastMapEdit\fP). 
.br
\fIpStatus\fP A pointer to the status structure.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBpsoErrors\fP on error. 
.RE
.PP

