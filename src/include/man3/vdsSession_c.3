.TH "API functions for vdsf sessions." 3 "16 Feb 2008" "Version 0.2.0" "vdsf C API" \" -*- nroff -*-
.ad l
.nh
.SH NAME
API functions for vdsf sessions. \- 
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "VDSF_EXPORT int \fBvdsCommit\fP (\fBVDS_HANDLE\fP sessionHandle)"
.br
.RI "\fICommit all insertions and deletions (of the current session) executed since the previous call to vdsCommit or vdsRollback. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsCreateObject\fP (\fBVDS_HANDLE\fP sessionHandle, const char *objectName, size_t nameLengthInBytes, \fBvdsObjectType\fP objectType)"
.br
.RI "\fICreate a new object in shared memory. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsDestroyObject\fP (\fBVDS_HANDLE\fP sessionHandle, const char *objectName, size_t nameLengthInBytes)"
.br
.RI "\fIDestroy an existing object in shared memory. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsErrorMsg\fP (\fBVDS_HANDLE\fP sessionHandle, char *message, size_t msgLengthInBytes)"
.br
.RI "\fIReturn the error message associated with the last error(s). \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsExitSession\fP (\fBVDS_HANDLE\fP sessionHandle)"
.br
.RI "\fITerminate the current session. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsGetInfo\fP (\fBVDS_HANDLE\fP sessionHandle, \fBvdsInfo\fP *pInfo)"
.br
.RI "\fIReturn information on the current status of the VDS (Virtual Data Space). \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsGetStatus\fP (\fBVDS_HANDLE\fP sessionHandle, const char *objectName, size_t nameLengthInBytes, \fBvdsObjStatus\fP *pStatus)"
.br
.RI "\fIReturn the status of the named object. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsInitSession\fP (\fBVDS_HANDLE\fP *sessionHandle)"
.br
.RI "\fIThis function initializes a session. \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsLastError\fP (\fBVDS_HANDLE\fP sessionHandle)"
.br
.RI "\fIReturn the last error seen in previous calls (of the current session). \fP"
.ti -1c
.RI "VDSF_EXPORT int \fBvdsRollback\fP (\fBVDS_HANDLE\fP sessionHandle)"
.br
.RI "\fIRollback all insertions and deletions (of the current session) executed since the previous call to vdsCommit or vdsRollback. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "VDSF_EXPORT int vdsCommit (\fBVDS_HANDLE\fP sessionHandle)"
.PP
Commit all insertions and deletions (of the current session) executed since the previous call to vdsCommit or vdsRollback. 
.PP
Insertions and deletions subjected to this call include both data items inserted and deleted from data containers (maps, etc.) and objects themselves created with vdsCreateObj and/or destroyed with vdsDestroyObj.
.PP
Note: the internal calls executed by the engine to satisfy this request cannot fail. As such, you cannot find yourself with an ugly situation where some operations were committed and others not. If an error is returned by this function, nothing was committed.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsCreateObject (\fBVDS_HANDLE\fP sessionHandle, const char * objectName, size_t nameLengthInBytes, \fBvdsObjectType\fP objectType)"
.PP
Create a new object in shared memory. 
.PP
The creation of the object only becomes permanent after a call to \fBvdsCommit\fP.
.PP
This function does not provide a handle to the newly created object. Use vdsQueueOpen and similar functions to get the handle.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator (null-terminators are not used by the vdsf engine). 
.br
\fIobjectType\fP The type of object to create (folder, queue, etc.).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsDestroyObject (\fBVDS_HANDLE\fP sessionHandle, const char * objectName, size_t nameLengthInBytes)"
.PP
Destroy an existing object in shared memory. 
.PP
The destruction of the object only becomes permanent after a call to \fBvdsCommit\fP.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator (null-terminators are not used by the vdsf engine).
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsErrorMsg (\fBVDS_HANDLE\fP sessionHandle, char * message, size_t msgLengthInBytes)"
.PP
Return the error message associated with the last error(s). 
.PP
If the length of the error message is greater than the length of the provided buffer, the error message will be truncated to fit in the provided buffer.
.PP
Caveat, some basic errors cannot be captured, if the provided handles (session handles or object handles) are incorrect (NULL, for example). Without a proper handle, the code cannot know where to store the error...
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fImessage\fP Buffer for the error message. Memory allocation for this buffer is the responsability of the caller. 
.br
\fImsgLengthInBytes\fP The length of \fImessage\fP (in bytes). Must be at least 32 bytes.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsExitSession (\fBVDS_HANDLE\fP sessionHandle)"
.PP
Terminate the current session. 
.PP
An implicit call to \fBvdsRollback\fP is executed by this function.
.PP
Once this function is executed, attempts to use the session handle might lead to memory violation (and, possibly, crashes).
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsGetInfo (\fBVDS_HANDLE\fP sessionHandle, \fBvdsInfo\fP * pInfo)"
.PP
Return information on the current status of the VDS (Virtual Data Space). 
.PP
The fetched information is mainly about the current status of the memory allocator.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIpInfo\fP A pointer to the \fBvdsInfo\fP structure.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsGetStatus (\fBVDS_HANDLE\fP sessionHandle, const char * objectName, size_t nameLengthInBytes, \fBvdsObjStatus\fP * pStatus)"
.PP
Return the status of the named object. 
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session. 
.br
\fIobjectName\fP The fully qualified name of the object. 
.br
\fInameLengthInBytes\fP The length of \fIobjectName\fP (in bytes) not counting the null terminator (null-terminators are not used by the vdsf engine). 
.br
\fIpStatus\fP A pointer to the \fBvdsObjStatus\fP structure.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsInitSession (\fBVDS_HANDLE\fP * sessionHandle)"
.PP
This function initializes a session. 
.PP
It takes one output argument, the session handle.
.PP
Upon successful completion, the session handle is set and the function returns zero. Otherwise the error code is returned and the handle is set to NULL.
.PP
This function will also initiate a new transaction.
.PP
Upon normal termination, the current transaction is rolled back. You MUST explicitly call vdseCommit to save your changes.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP The handle to the newly created session.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsLastError (\fBVDS_HANDLE\fP sessionHandle)"
.PP
Return the last error seen in previous calls (of the current session). 
.PP
Caveat, some basic errors cannot be captured, if the provided handles (session handles or object handles) are incorrect (NULL, for example). Without a proper handle, the code cannot know where to store the error...
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session.
.RE
.PP
\fBReturns:\fP
.RS 4
The last error. 
.RE
.PP

.SS "VDSF_EXPORT int vdsRollback (\fBVDS_HANDLE\fP sessionHandle)"
.PP
Rollback all insertions and deletions (of the current session) executed since the previous call to vdsCommit or vdsRollback. 
.PP
Insertions and deletions subjected to this call include both data items inserted and deleted from data containers (maps, etc.) and objects themselves created with vdsCreateObj and/or destroyed with vdsDestroyObj.
.PP
Note: the internal calls executed by the engine to satisfy this request cannot fail. As such, you cannot find yourself with an ugly situation where some operations were rollbacked and others not. If an error is returned by this function, nothing was rollbacked.
.PP
\fBParameters:\fP
.RS 4
\fIsessionHandle\fP Handle to the current session.
.RE
.PP
\fBReturns:\fP
.RS 4
0 on success or a \fBvdsErrors\fP on error. 
.RE
.PP

