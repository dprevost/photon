/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2007-2008 Daniel Prevost <dprevost@users.sourceforge.net>
 *
 * This file is part of the vdsf (Virtual Data Space Framework) Library.
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 as published by the Free Software
 * Foundation and appearing in the file COPYING included in the
 * packaging of this library.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef VDS_SESSION_H_CPP
#define VDS_SESSION_H_CPP

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#include <vdsf/vdsCommon.h>
#include <string>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

class VDSF_EXPORT vdsSession
{
public:
   
   vdsSession();

   /**
    * Terminate the current session and destroy this object.
    *
    * An implicit call to ::Rollback is executed by this destructor.
    */
   virtual ~vdsSession();
   
   /**
    * Commit all insertions and deletions (of the current session) executed 
    * since the previous call to Commit or Rollback.
    *
    * Insertions and deletions subjected to this call include both data items
    * inserted and deleted from data containers (maps, etc.) and objects 
    * themselves created with ::CreateObject and/or destroyed with 
    * ::DestroyObject.
    *
    * Note: the internal calls executed by the engine to satisfy this request
    * cannot fail. As such, you cannot find yourself with an ugly situation 
    * where some operations were committed and others not. If this function 
    * thows an exception, nothing was committed.
    *
    * \exception vdsException An abnormal error occured.
    */
   void Commit();
   
   /**
    * Create a new object in shared memory.
    *
    * The creation of the object only becomes permanent after a call to 
    * ::Commit.
    *
    * \param[in]  objectName The fully qualified name of the object. 
    * \param[in]  pDefinition The type of object to create (folder, queue, etc.)
    *             and the optional definitions (as needed).
    *
    * \exception vdsException An abnormal error occured.
    */
   void CreateObject( const std::string   & objectName,
                      vdsObjectDefinition * pDefinition );
   
   /**
    * Create a new object in shared memory.
    *
    * The creation of the object only becomes permanent after a call to 
    * ::Commit.
    *
    * \param[in]  objectName The fully qualified name of the object. 
    * \param[in]  nameLengthInBytes The length of \em objectName (in bytes) not
    *             counting the null terminator.
    * \param[in]  pDefinition The type of object to create (folder, queue, etc.)
    *             and the optional definitions (as needed).
    *
    * \exception vdsException An abnormal error occured.
    */
   void CreateObject( const char          * objectName,
                      size_t                nameLengthInBytes,
                      vdsObjectDefinition * pDefinition );
   
   /**
    * Destroy an existing object in shared memory.
    *
    * The destruction of the object only becomes permanent after a call to 
    * ::Commit.
    *
    * \param[in]  objectName The fully qualified name of the object. 
    *
    * \exception vdsException An abnormal error occured.
    */
   void DestroyObject( const std::string & objectName );

   /**
    * Destroy an existing object in shared memory.
    *
    * The destruction of the object only becomes permanent after a call to 
    * ::Commit.
    *
    * \param[in]  objectName The fully qualified name of the object. 
    * \param[in]  nameLengthInBytes The length of \em objectName (in bytes) not
    *             counting the null terminator.
    *
    * \exception vdsException An abnormal error occured.
    */
   void DestroyObject( const char * objectName,
                       size_t       nameLengthInBytes );

   /**
    * Return the error message associated with the last error(s).
    *
    * If the length of the error message is greater than the length of the
    * provided buffer, the error message will be truncated to fit in the
    * provided buffer.
    *
    * Caveat, some basic errors cannot be captured, if the provided handles
    * (session handles or object handles) are incorrect (NULL, for example).
    * Without a proper handle, the code cannot know where to store
    * the error...
    *
    * \param[out]  message Buffer for the error message. Memory allocation for 
    *              this buffer is the responsability of the caller.
    * \param[in]   msgLengthInBytes The length of \em message (in bytes). Must
    *              be at least 32 bytes.
    *
    * \exception vdsException An abnormal error occured.
    */   
   void ErrorMsg( char   * message,
                  size_t   msgLengthInBytes );

   /**
    * Return the error message associated with the last error(s).
    *
    * Caveat, some basic errors cannot be captured, if the provided handles
    * (session handles or object handles) are incorrect (NULL, for example).
    * Without a proper handle, the code cannot know where to store
    * the error...
    *
    * \param[out]  message Buffer for the error message. Memory allocation for 
    *              this buffer is the responsability of the caller.
    *
    * \exception vdsException An abnormal error occured.
    */   
   std::string & ErrorMsg( std::string & message );

   /**
    * Return information on the current status of the VDS (Virtual Data Space).
    *
    * The fetched information is mainly about the current status of the memory 
    * allocator.
    *
    * \param[out] pInfo      A pointer to the ::vdsInfo structure.
    *
    * \exception vdsException An abnormal error occured.
    */
   void GetInfo( vdsInfo * pInfo );

   /**
    * Return the status of the named object.
    *
    * \param[in]  objectName The fully qualified name of the object. 
    * \param[out] pStatus A pointer to the vdsObjStatus structure.
    *
    * \exception vdsException An abnormal error occured.
    */
   void GetStatus( const std::string & objectName,
                   vdsObjStatus      * pStatus );

   /**
    * Return the status of the named object.
    *
    * \param[in]  objectName The fully qualified name of the object. 
    * \param[in]  nameLengthInBytes The length of \em objectName (in bytes) not
    *             counting the null terminator.
    * \param[out] pStatus A pointer to the vdsObjStatus structure.
    *
    * \exception vdsException An abnormal error occured.
    */
   void GetStatus( const char   * objectName,
                   size_t         nameLengthInBytes,
                   vdsObjStatus * pStatus );

   /**
    * This function initializes a session. 
    * 
    * This function will also initiate a new transaction.
    *
    * Upon normal termination, the current transaction is rolled back. You
    * MUST explicitly call Commit to save your changes.
    *
    * \exception vdsException An abnormal error occured.
    */
   void Init();
   
   /**
    * Return the last error seen in previous calls (of the current session).
    *
    * \exception vdsException An abnormal error occured.
    */
   int LastError();

   /**
    * Rollback all insertions and deletions (of the current session) executed 
    * since the previous call to Commit or Rollback.
    *
    * Insertions and deletions subjected to this call include both data items
    * inserted and deleted from data containers (maps, etc.) and objects 
    * themselves created with ::CreateObject and/or destroyed with 
    * ::DestroyObject.
    *
    * Note: the internal calls executed by the engine to satisfy this request
    * cannot fail. As such, you cannot find yourself with an ugly situation 
    * where some operations were rollbacked and others not. If this function 
    * thows an exception, nothing was rollbacked.
    *
    * \exception vdsException An abnormal error occured.
    */
   void Rollback();
   
private:

   /// Pointer to the vdsaSession struct
   VDS_HANDLE m_sessionHandle;
   
   friend class vdsFolder;
   friend class vdsHashMap;
   friend class vdsLifo;
   friend class vdsQueue;
};

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif /* VDS_SESSION_H_CPP */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

