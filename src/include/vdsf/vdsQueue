/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2006-2007 Daniel Prevost <dprevost@users.sourceforge.net>
 *
 * This file is part of the vdsf (Virtual Data Space Framework) Library.
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 as published by the Free Software
 * Foundation and appearing in the file COPYING included in the
 * packaging of this library.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef VDS_QUEUE_H_CPP
#define VDS_QUEUE_H_CPP

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#include <vdsf/vdsCommon.h>
#include <string>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

// Forward declarations
class vdsSession;

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

class VDSF_EXPORT vdsQueue
{
public:

   vdsQueue( vdsSession &session );

   virtual ~vdsQueue();

   /**
    * \brief Close a FIFO queue.
    *
    * This function terminates the current access to the queue in shared 
    * memory (the queue itself, in shared memory is untouched).
    *
    * \warning Closing an object does not automatically commit or rollback 
    * data items that were inserted or removed. You still must use either 
    * vdsSession::Commit or vdsSession::Rollback to end the current unit of 
    * work.
    *
    * \exception vdsException An abnormal error occured.
    */
   void Close();
   
   /** 
    * Iterate through the queue - no data items are removed from the queue
    * by this function.
    *
    * Data items which were added by another session and are not yet committed 
    * will not be seen by the iterator. Likewise, destroyed data items (even if
    * not yet committed) are invisible.
    *
    * \param[out]  buffer The buffer provided by the user to hold the content of
    *              the first element. Memory allocation for this buffer is the
    *              responsability of the caller.
    * \param[in]   bufferLength The length of \em buffer (in bytes).
    * \param[out]  returnedLength The actual number of bytes in the data item.
    *
    * \return 0 on success or VDS_IS_EMPTY if the queue is empty.
    *
    * \exception vdsException An abnormal error occured.
    */
   int GetFirst( void   * buffer,
                 size_t   bufferLength,
                 size_t * returnedLength );

   /** 
    * Iterate through the queue - no data items are removed from the queue
    * by this function.
    *
    * Data items which were added by another session and are not yet committed 
    * will not be seen by the iterator. Likewise, destroyed data items (even if
    * not yet committed) are invisible.
    *
    * Evidently, you must call ::GetFirst to initialize the iterator. 
    * Not so evident - calling ::Pop will reset the iteration to the
    * last element (they use the same internal storage). If this cause a 
    * problem, please let us know.
    *
    * \param[out]  buffer The buffer provided by the user to hold the content of
    *              the next element. Memory allocation for this buffer is the
    *              responsability of the caller.
    * \param[in]   bufferLength The length of \em buffer (in bytes).
    * \param[out]  returnedLength The actual number of bytes in the data item.
    *
    * \return 0 on success or VDS_REACHED_THE_END when the iteration reaches
    *           the end of the queue.
    *
    * \exception vdsException An abnormal error occured.
    */
   int GetNext( void   * buffer,
                size_t   bufferLength,
                size_t * returnedLength );

   /** 
    * Open an existing FIFO queue (see Session::CreateObject to create a new 
    * queue).
    *
    * \param[in]  queueName The fully qualified name of the queue. 
    *
    * \exception vdsException An abnormal error occured.
    */
   void Open( const std::string & queueName );

   /** 
    * Open an existing FIFO queue (see Session::CreateObject to create a new 
    * queue).
    *
    * \param[in]  queueName The fully qualified name of the queue. 
    * \param[in]  nameLengthInBytes The length of \em queueName (in bytes) not
    *             counting the null terminator.
    *
    * \exception vdsException An abnormal error occured.
    */
   void Open( const char * queueName,
              size_t       nameLengthInBytes );

   /** 
    * Remove the first item from the beginning of a FIFO queue and return it 
    * to the caller.
    *
    * Data items which were added by another session and are not yet committed 
    * will not be seen by this function. Likewise, destroyed data items (even if
    * not yet committed) are invisible.
    *
    * The removals only become permanent after a call to vdsSession::Commit.
    *
    * \param[out]  buffer The buffer provided by the user to hold the content of
    *              the data item. Memory allocation for this buffer is the
    *              responsability of the caller.
    * \param[in]   bufferLength The length of \em buffer (in bytes).
    * \param[out]  returnedLength The actual number of bytes in the data item.
    *
    * \return 0 on success or VDS_IS_EMPTY if the queue is empty or
    *           VDS_ITEM_IS_IN_USE if all existing items are "invisible".
    *
    * \exception vdsException An abnormal error occured.
    */
   int Pop( void   * buffer,
            size_t   bufferLength,
            size_t * returnedLength );

   /**
    * Insert a data element at the end of the FIFO queue.
    *
    * The additions only become permanent after a call to vdsSession::Commit.
    *
    * \param[in]  pItem  The data item to be inserted.
    * \param[in]  length The length of \em pItem (in bytes).
    *
    * \exception vdsException An abnormal error occured.
    */
   void Push( const void * pItem, 
              size_t       length );

   /**
    * Return the status of the queue.
    *
    * \param[out] pStatus      A pointer to the status structure.
    *
    * \exception vdsException An abnormal error occured.
    */
   void Status( vdsObjStatus * pStatus );

private:

   /// Pointer to the vdsaQueue struct.
   VDS_HANDLE m_objectHandle;

   /// Reference to the vdsaSession struct (we belong to).
   VDS_HANDLE & m_sessionHandle;

};

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif /* VDS_QUEUE_H_CPP */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

