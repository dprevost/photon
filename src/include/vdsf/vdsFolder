/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2006-2007 Daniel Prevost <dprevost@users.sourceforge.net>
 *
 * This file is part of the vdsf (Virtual Data Space Framework) Library.
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 as published by the Free Software
 * Foundation and appearing in the file COPYING included in the
 * packaging of this library.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef VDS_FOLDER_H_CPP
#define VDS_FOLDER_H_CPP

#include <vdsf/vdsCommon.h>
#include <string>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

// Forward declarations
class vdsSession;

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

class VDSF_EXPORT vdsFolder
{
public:

   vdsFolder( vdsSession &session );

   virtual ~vdsFolder();

   void Open( const std::string & folderName );

   void Open( const char * folderName,
              size_t       nameLengthInBytes );
   
   void Close();

   /** 
    * Iterate through the folder - no data items are removed from the 
    * folder by this function.
    *
    * Data items which were added by another session and are not yet 
    * committed will not be seen by the iterator. Likewise, destroyed 
    * data items (even if not yet committed) are invisible.
    *
    * \param[out] pEntry The data structure provided by the user to 
    *             hold the content of each item in the folder. Memory 
    *             allocation for this buffer is the responsability of 
    *             the caller.
    *
    * \return 0 on success or a ::vdsErrors on error.
    */
   int GetFirst( vdsFolderEntry * pEntry );

   /** 
    * Iterate through the folder.
    *
    * Data items which were added by another session and are not yet 
    * committed will not be seen by the iterator. Likewise, destroyed 
    * data items (even if not yet committed) are invisible.
    *
    * Evidently, you must call ::vdsFolderGetFirst to initialize the iterator. 
    *
    * \param[out] pEntry The data structure provided by the user to 
    *             hold the content of each item in the folder. Memory 
    *             allocation for this buffer is the responsability of 
    *             the caller.
    *
    * \return 0 on success or a ::vdsErrors on error.
    */
   int GetNext( vdsFolderEntry * pEntry );

   void Status( vdsObjStatus * pStatus );

private:

   VDS_HANDLE m_objectHandle;
   VDS_HANDLE & m_sessionHandle;

};

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif /* VDS_FOLDER_H_CPP */

