/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2008-2009 Daniel Prevost <dprevost@photonsoftware.org>
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 or version 3 as published by the 
 * Free Software Foundation and appearing in the file COPYING.GPL2 and 
 * COPYING.GPL3 included in the packaging of this software.
 *
 * Licensees holding a valid Photon Commercial license can use this file 
 * in accordance with the terms of their license.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef PHOTON_KEY_DEFINITION
#define PHOTON_KEY_DEFINITION

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#include <stdlib.h>
#if defined(WIN32)
#  pragma warning(disable: 4786)
#  pragma warning(disable: 4251)
#endif
#include <string>

#include <photon/psoCommon.h>
#include <photon/psoPhotonODBC.h>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

namespace pso {

/** 
 * This abstract base class provides the "interface" needed to both define
 * and retrieve the definition of the fields of the key.
 */
class PHOTON_EXPORT KeyDefinition
{
protected:

   /**
    * Construct a key definition.
    *
    * This constructor is useful to query existing definitions but the
    * new object cannot be used to create new data containers (without 
    * calling ::Reset() - which is equivalent to the other constructor).
    *
    * \param[in] serializedKeyDef The serialized key definition as an 
    *            array of bytes. This parameter can be NULL if the object
    *            has no key.
    * \param[in] keyDefLength The length in bytes of serializedKeyDef. 
    *            Should be set to zero if serializedKeyDef is NULL.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   KeyDefinition( unsigned char * serializedKeyDef,
                  psoUint32       keydefLength );

   /**
    * Construct a data-container definition.
    *
    * \param[in] numberOfFields The number of data fields.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   KeyDefinition();

public:
   
   virtual ~KeyDefinition();
     
   /**
    * Iterates through the definition.
    *
    * \return A formatted string containing the information on an item of 
    *         the definition.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   virtual std::string GetNext() = 0;

   /**
    * Reset the object to be reused for the definition of another data 
    * container.
    *
    * \param[in] numberOfFields The number of data fields of the new data
    *            container.
    * \param[in] type The type of the object.
    *
    * \exception pso::Exception An abnormal error occured.
    */
//   void Reset( psoUint32 numberOfFields, enum psoObjectType type );

   /**
    * Reset the object to be reused for the definition of another data 
    * container.
    *
    * This version of reset is used internally by the C++ API to populate
    * the C++ class from the C structs.
    *
    * \param[in] definition The object definition C struct
    * \param[in] inputKey   The key definition. Set it to NULL for objects
    *                       not using keys (FIFO Queues, etc.).
    * \param[in] inputFields The field definition array
    *
    * \exception pso::Exception An abnormal error occured.
    */
//   void Reset( psoObjectDefinition & definition,
//               psoKeyDefinition    * inputKey,
//               psoFieldDefinition  * inputFields );
   
   /** Returns the definition of the key. */
   const unsigned char * GetKey();

   /** Returns the length, in bytes, of the definition. */
   psoUint32 GetKeyLength();
   
protected:

   unsigned char * serializedKeyDef;
   psoUint32       keyDefLength;

   /**
    * Set by the constructor to true if we are using this object to read 
    * an existing definition. Or false if we are using this object to 
    * create new Photon objects.
    */
   bool readOnly;
};

} // End of namespace

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif // PHOTON_KEY_DEFINITION

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

