/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2007-2008 Daniel Prevost <dprevost@photonsoftware.org>
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 as published by the Free Software
 * Foundation and appearing in the file COPYING included in the
 * packaging of this library.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef PSO_FOLDER_H_CPP
#define PSO_FOLDER_H_CPP

#include <photon/psoCommon.h>
#include <string>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

// Forward declarations
class psoSession;

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

class PHOTON_EXPORT psoFolder
{
public:

   psoFolder( psoSession &session );

   virtual ~psoFolder();

   /**
    * \brief Close a folder.
    *
    * This function terminates the current access to the folder in shared memory
    * (the folder itself is untouched).
    *
    * \exception psoException An abnormal error occured.
    */
   void Close();

   /**
    * Create a new object in shared memory as a child of the current folder.
    *
    * The creation of the object only becomes permanent after a call to 
    * psoSession::psoCommit.
    *
    * This function does not provide a handle or an object to the newly 
    * created shared-memory object. Use psoQueue::Open and similar functions 
    * to access them.
    *
    * \param[in] objectName The name of the object. 
    * \param[in] pDefinition The type of object to create (folder, queue, etc.)
    *            and the "optional" definition.
    *
    * \exception psoException An abnormal error occured.
    */
   void CreateObject( const std::string   & objectName,
                      psoObjectDefinition * pDefinition );

   /**
    * Create a new object in shared memory as a child of the current folder.
    *
    * The creation of the object only becomes permanent after a call to 
    * psoSession::psoCommit.
    *
    * This function does not provide a handle or an object to the newly 
    * created shared-memory object. Use psoQueue::Open and similar functions 
    * to access them.
    *
    * \param[in] objectName The name of the object.
    * \param[in] nameLengthInBytes The length of \em objectName (in bytes) not
    *            counting the null terminator.
    * \param[in] pDefinition The type of object to create (folder, queue, etc.)
    *            and the "optional" definition.
    *
    * \exception psoException An abnormal error occured.
    */
   void CreateObject( const char    *       objectName,
                      size_t                nameLengthInBytes,
                      psoObjectDefinition * pDefinition );

   /**
    * Create a new object in shared memory as a child of the current folder.
    *
    * The creation of the object only becomes permanent after a call to 
    * psoSession::psoCommit.
    *
    * This function does not provide a handle or an object to the newly 
    * created shared-memory object. Use psoQueue::Open and similar functions 
    * to access them.
    *
    * \param[in] xmlBuffer    The XML buffer containing all the required
    *                         information. 
    *
    * \exception psoException An abnormal error occured.
    */
   void CreateObjectXML( const std::string & xmlBuffer );

  /**
    * Create a new object in shared memory as a child of the current folder.
    *
    * The creation of the object only becomes permanent after a call to 
    * psoSession::psoCommit.
    *
    * This function does not provide a handle or an object to the newly 
    * created shared-memory object. Use psoQueue::Open and similar functions 
    * to access them.
    *
    * \param[in] xmlBuffer    The XML buffer (string) containing all the required
    *                         information. 
    * \param[in] lengthInBytes The length of \em xmlBuffer (in bytes) not
    *                          counting the null terminator.
    *
    * \exception psoException An abnormal error occured.
    */
   void CreateObjectXML( const char * xmlBuffer,
                         size_t       lengthInBytes );

   /**
    * Destroy an object, child of the current folder, in shared memory.
    *
    * The destruction of the object only becomes permanent after a call to 
    * psoSession::psoCommit.
    *
    * \param[in]  objectName The name of the object. 
    *
    * \exception psoException An abnormal error occured.
    */
   void DestroyObject( const std::string & objectName );

   /**
    * Destroy an object, child of the current folder, in shared memory.
    *
    * The destruction of the object only becomes permanent after a call to 
    * psoSession::psoCommit.
    *
    * \param[in]  objectName The name of the object. 
    * \param[in]  nameLengthInBytes The length of \em objectName (in bytes) not
    *             counting the null terminator.
    *
    * \exception psoException An abnormal error occured.
    */
   void DestroyObject( const char * objectName,
                       size_t       nameLengthInBytes );

   /** 
    * Iterate through the folder - no data items are removed from the 
    * folder by this function.
    *
    * Data items which were added by another session and are not yet 
    * committed will not be seen by the iterator. Likewise, destroyed 
    * data items (even if not yet committed) are invisible.
    *
    * \param[out] pEntry The data structure provided by the user to 
    *             hold the content of each item in the folder. Memory 
    *             allocation for this buffer is the responsability of 
    *             the caller.
    *
    * \return 0 on success or PSO_IS_EMPTY if the folder is empty.
    *
    * \exception psoException An abnormal error occured.
    */
   int GetFirst( psoFolderEntry * pEntry );

   /** 
    * Iterate through the folder.
    *
    * Data items which were added by another session and are not yet 
    * committed will not be seen by the iterator. Likewise, destroyed 
    * data items (even if not yet committed) are invisible.
    *
    * Evidently, you must call psoFolder::GetFirst to initialize the iterator. 
    *
    * \param[out] pEntry The data structure provided by the user to 
    *             hold the content of each item in the folder. Memory 
    *             allocation for this buffer is the responsability of 
    *             the caller.
    *
    * \return 0 on success or PSO_REACHED_THE_END when the iteration reaches
    *           the end of the folder.
    *
    * \exception psoException An abnormal error occured.
    */
   int GetNext( psoFolderEntry * pEntry );

   /** 
    * Open an existing folder (see psoSession::CreateObject to create a new 
    * folder).
    *
    * \param[in]  folderName The fully qualified name of the folder. 
    *
    * \exception psoException An abnormal error occured.
    */
   void Open( const std::string & folderName );

   /** 
    * Open an existing folder (see psoSession::CreateObject to create a new 
    * folder).
    *
    * \param[in]  folderName The fully qualified name of the folder. 
    * \param[in]  nameLengthInBytes The length of \em folderName (in bytes) not
    *             counting the null terminator.
    *
    * \exception psoException An abnormal error occured.
    */
   void Open( const char * folderName,
              size_t       nameLengthInBytes );
   
   /**
    * Return the status of the folder.
    *
    * \param[out] pStatus      A pointer to the status structure.
    *
    * \exception psoException An abnormal error occured.
    */
   void Status( psoObjStatus * pStatus );

private:

   /// Pointer to the psoaFolder struct.
   PSO_HANDLE m_objectHandle;

   /// Reference to the psoaSession struct (we belong to).
   PSO_HANDLE & m_sessionHandle;

};

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif /* PSO_FOLDER_H_CPP */

