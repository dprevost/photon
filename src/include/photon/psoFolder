/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2007-2009 Daniel Prevost <dprevost@photonsoftware.org>
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 or version 3 as published by the 
 * Free Software Foundation and appearing in the file COPYING.GPL2 and 
 * COPYING.GPL3 included in the packaging of this software.
 *
 * Licensees holding a valid Photon Commercial license can use this file 
 * in accordance with the terms of their license.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef PSO_FOLDER_H_CPP
#define PSO_FOLDER_H_CPP

#include <photon/psoCommon.h>
#include <string>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

namespace pso {

// Forward declarations
class Session;
class FieldDefinition;
class KeyDefinition;

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

/**
 * Folders allow the organization of the data containers in a tree-like
 * structure (similar to a filesystem).
 *
 * If a flat structure is preferred, simply make all your data containers
 * children of the top folder ("/") - for example, "/MyQueue", "/MyMap", etc.
 */
class PHOTON_EXPORT Folder
{
public:

   Folder( Session & session );

   virtual ~Folder();

   /**
    * \brief Close a folder.
    *
    * This function terminates the current access to the folder in shared memory
    * (the folder itself is untouched).
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Close();

   /**
    * Create a new object in shared memory as a child of the current folder.
    *
    * The creation of the object only becomes permanent after a call to 
    * Session::Commit.
    *
    * \param[in] objectName The name of the object. 
    * \param[in] fieldDefinition The definition of the data fields.
    * \param[in] keyDefinition   The definition of the key. Set it to NULL
    *                            for objects without keys.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void CreateObject( const std::string & objectName,
                      FieldDefinition   * fieldDefinition,
                      KeyDefinition     * keyDefinition );

   /**
    * Create a new object in shared memory as a child of the current folder.
    *
    * The creation of the object only becomes permanent after a call to 
    * Session::Commit.
    *
    * This function does not provide a handle or an object to the newly 
    * created shared-memory object. Use psoQueue::Open and similar functions 
    * to access them.
    *
    * \param[in] objectName The name of the object. 
    * \param[in] definition The type of object to create (folder, queue, etc.),
    *            the number of fields and the "optional" key definition 
    *            (for hash maps and similar).
    * \param[in] key The definition of the key or NULL if the object has no key.
    * \param[in] keyLength The length in bytes of the buffer \em key. 
    *            It should be set to zero if \em key is NULL.
    * \param[in] fields An opaque definition of the data field of the object.
    *            It can be set to NULL when creating a Folder.
    * \param[in] fieldsLength The length in bytes of the buffer \em fields. 
    *            It should be set to zero if \em fields is NULL.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void CreateObject( const std::string         & objectName,
                      const psoObjectDefinition & definition,
                      const unsigned char       * key,
                      psoUint32                   keyLength,
                      const unsigned char       * fields,
                      psoUint32                   fieldsLength );

   /**
    * Create a new object in shared memory as a child of the current folder.
    *
    * The creation of the object only becomes permanent after a call to 
    * Session::Commit.
    *
    * This function does not provide a handle or an object to the newly 
    * created shared-memory object. Use psoQueue::Open and similar functions 
    * to access them.
    *
    * \param[in] objectName The name of the object.
    * \param[in] nameLengthInBytes The length of \em objectName (in bytes) not
    *            counting the null terminator.
    * \param[in] definition The type of object to create (folder, queue, etc.),
    *            the number of fields and the "optional" key definition 
    *            (for hash maps and similar).
    * \param[in] key The definition of the key or NULL if the object has no key.
    * \param[in] keyLength The length in bytes of the buffer \em key. 
    *            It should be set to zero if \em key is NULL.
    * \param[in] fields An opaque definition of the data field of the object.
    *            It can be set to NULL when creating a Folder.
    * \param[in] fieldsLength The length in bytes of the buffer \em fields. 
    *            It should be set to zero if \em fields is NULL.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void CreateObject( const char          * objectName,
                      psoUint32             nameLengthInBytes,
                      psoObjectDefinition & definition,
                      const unsigned char * key,
                      psoUint32             keyLength,
                      const unsigned char * fields,
                      psoUint32             fieldsLength );

   /**
    * Create a new object in shared memory as a child of the current folder.
    *
    * The creation of the object only becomes permanent after a call to 
    * Session::Commit.
    *
    * This function does not provide a handle or an object to the newly 
    * created shared-memory object. Use Queue::Open and similar functions 
    * to access them.
    *
    * \param[in] xmlBuffer    The XML buffer containing all the required
    *                         information. 
    *
    * \exception pso::Exception An abnormal error occured.
    */
//   void CreateObjectXML( const std::string & xmlBuffer );

  /**
    * Create a new object in shared memory as a child of the current folder.
    *
    * The creation of the object only becomes permanent after a call to 
    * Session::Commit.
    *
    * This function does not provide a handle or an object to the newly 
    * created shared-memory object. Use psoQueue::Open and similar functions 
    * to access them.
    *
    * \param[in] xmlBuffer    The XML buffer (string) containing all the required
    *                         information. 
    * \param[in] lengthInBytes The length of \em xmlBuffer (in bytes) not
    *                          counting the null terminator.
    *
    * \exception pso::Exception An abnormal error occured.
    */
//   void CreateObjectXML( const char * xmlBuffer,
//                         psoUint32    lengthInBytes );

   /**
    * Destroy an object, child of the current folder, in shared memory.
    *
    * The destruction of the object only becomes permanent after a call to 
    * Session::Commit.
    *
    * \param[in]  objectName The name of the object. 
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void DestroyObject( const std::string & objectName );

   /**
    * Destroy an object, child of the current folder, in shared memory.
    *
    * The destruction of the object only becomes permanent after a call to 
    * Session::Commit.
    *
    * \param[in]  objectName The name of the object. 
    * \param[in]  nameLengthInBytes The length of \em objectName (in bytes) not
    *             counting the null terminator.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void DestroyObject( const char * objectName,
                       psoUint32    nameLengthInBytes );

   /** 
    * Iterate through the folder - no data items are removed from the 
    * folder by this function.
    *
    * Data items which were added by another session and are not yet 
    * committed will not be seen by the iterator. Likewise, destroyed 
    * data items (even if not yet committed) are invisible.
    *
    * \param[out] entry The data structure provided by the user to 
    *             hold the content of each item in the folder. Memory 
    *             allocation for this buffer is the responsability of 
    *             the caller.
    *
    * \return 0 on success or PSO_IS_EMPTY if the folder is empty.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   int GetFirst( psoFolderEntry & entry );

   /** 
    * Iterate through the folder.
    *
    * Data items which were added by another session and are not yet 
    * committed will not be seen by the iterator. Likewise, destroyed 
    * data items (even if not yet committed) are invisible.
    *
    * Evidently, you must call Folder::GetFirst to initialize the iterator. 
    *
    * \param[out] entry The data structure provided by the user to 
    *             hold the content of each item in the folder. Memory 
    *             allocation for this buffer is the responsability of 
    *             the caller.
    *
    * \return 0 on success or PSO_REACHED_THE_END when the iteration reaches
    *           the end of the folder.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   int GetNext( psoFolderEntry & entry );

   /** 
    * Open an existing folder (see Session::CreateObject to create a new 
    * folder).
    *
    * \param[in]  folderName The fully qualified name of the folder. 
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Open( const std::string & folderName );

   /** 
    * Open an existing folder (see Session::CreateObject to create a new 
    * folder).
    *
    * \param[in]  folderName The fully qualified name of the folder. 
    * \param[in]  nameLengthInBytes The length of \em folderName (in bytes) not
    *             counting the null terminator.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Open( const char * folderName,
              psoUint32    nameLengthInBytes );
   
   /**
    * Return the status of the folder.
    *
    * \param[out] status A pointer to the status structure.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Status( psoObjStatus & status );

private:

   /// Pointer to the psoaFolder struct.
   PSO_HANDLE m_objectHandle;

   /// Reference to the psoaSession struct (we belong to).
   PSO_HANDLE & m_sessionHandle;

};

} // End of namespace

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif // PSO_FOLDER_H_CPP

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

