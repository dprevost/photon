/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2007-2009 Daniel Prevost <dprevost@photonsoftware.org>
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 or version 3 as published by the 
 * Free Software Foundation and appearing in the file COPYING.GPL2 and 
 * COPYING.GPL3 included in the packaging of this software.
 *
 * Licensees holding a valid Photon Commercial license can use this file 
 * in accordance with the terms of their license.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef PSO_HASH_MAP_H_CPP
#define PSO_HASH_MAP_H_CPP

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#include <photon/psoCommon.h>
#include <string>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

namespace pso {

// Forward declarations
//class psoQueueItem;
class Session;
class ObjDefinition;

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

/**
 * Photon standard hash maps.
 *
 * Hash maps use unique keys - the data items are not sorted.
 */
class PHOTON_EXPORT HashMap
{
public:

   HashMap( Session & session );

   virtual ~HashMap();

   /**
    * \brief Close a hash map.
    *
    * This function terminates the current access to the hash map in shared 
    * memory (the hash map itself is untouched).
    *
    * \warning Closing an object does not automatically commit or rollback 
    * data items that were inserted or removed. You still must use either 
    * psoSession::Commit or psoSession::Rollback to end the current unit of 
    * work.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Close();
   
   /**
    * \brief Retrieve the data definition of the hash map.
    *
    * This function uses the optional class ObjDefinition. This class 
    * simplify the management of the array of field definitions.
    *
    * \param[out] definition The definition of the object (accessed through
    *             the definition "helper object".
    *
    * \exception pso::Exception An abnormal error occured.
    */
//   void Definition( ObjDefinition & definition );

   /**
    * \brief Retrieve the data definition of the hash map.
    *
    * You can call the function ::DefinitionLength to retrieve the 
    * length of the key and field definitions. This allows you to allocate 
    * the proper size for both \em key and \em fields.
    *
    * \param[out] definition The definition of the object.
    * \param[out] key An opaque definition of the key. You can set this field
    *             to NULL if you do not want to retrieve the key definition.
    * \param[in]  keyLength The length in bytes of the buffer \em key. 
    *             It should be set to zero if \em key is NULL.
    * \param[out] fields An opaque definition of the data fields of the object.
    *             It can be set to NULL if you do not want to retrieve the
    *             definition.
    * \param[in]  fieldsLength The length in bytes of the buffer \em fields.
    *             It should be set to zero if \em fields is NULL.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Definition( psoObjectDefinition & definition,
                    unsigned char       * key,
                    psoUint32             keyLength,
                    unsigned char       * fields,
                    psoUint32             fieldsLength );

   /**
    * \brief Retrieve the lengths of the variable elements of the definition 
    *        of the hash map.
    *
    * This function is a helper function for ::Definition. 
    * It allows you to allocate the proper size for \em key and \em fields.
    *
    * \param[out] keyLength The length in bytes of the key buffer.
    * \param[out] fieldsLength The length in bytes of the fields buffer.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void DefinitionLength( psoUint32 * keyLength,
                          psoUint32 * fieldsLength );

   /** 
    * Remove the data item identified by the given key from the hash map.
    *
    * Data items which were added by another session and are not yet committed 
    * will not be seen by this function and cannot be removed. Likewise, 
    * destroyed data items (even if not yet committed) are invisible.
    *
    * The removals only become permanent after a call to psoSession::Commit.
    *
    * \param[in]  key The key of the item to be removed.
    * \param[in]  keyLength The length of the \em key buffer (in bytes).
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Delete( const void * key,
                psoUint32    keyLength );

   /** 
    * Retrieve the data item identified by the given key from the hash map.
    *
    * Data items which were added by another session and are not yet committed 
    * will not be seen by this function. Likewise, 
    * destroyed data items (even if not yet committed) are invisible.
    *
    * \param[in]  key The key of the item to be retrieved.
    * \param[in]  keyLength The length of the \em key buffer (in bytes).
    * \param[out] buffer The buffer provided by the user to hold the content of
    *             the data item. Memory allocation for this buffer is the
    *             responsability of the caller.
    * \param[in]  bufferLength The length of \em buffer (in bytes).
    * \param[out] returnedLength The actual number of bytes in the data item.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Get( const void * key,
             psoUint32    keyLength,
             void       * buffer,
             psoUint32    bufferLength,
             psoUint32  & returnedLength );

   /** 
    * Iterate through the hash map.
    *
    * Data items which were added by another session and are not yet committed 
    * will not be seen by the iterator. Likewise, destroyed data items (even if
    * not yet committed) are invisible.
    *
    * Data items retrieved this way will not be sorted.
    *
    * \param[out] key The key buffer provided by the user to hold the content of
    *             the key associated with the first element. Memory allocation 
    *             for this buffer is the responsability of the caller.
    * \param[in]  keyLength The length of the \em key buffer (in bytes).
    * \param[out] buffer The buffer provided by the user to hold the content of
    *             the first element. Memory allocation for this buffer is the
    *             responsability of the caller.
    * \param[in]  bufferLength The length of \em buffer (in bytes).
    * \param[out] retKeyLength The actual number of bytes in the key
    * \param[out] retDataLength The actual number of bytes in the data item.
    *
    * \return 0 on success or PSO_IS_EMPTY if the hash map is empty.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   int GetFirst( void      * key,
                 psoUint32   keyLength,
                 void      * buffer,
                 psoUint32   bufferLength,
                 psoUint32 & retKeyLength,
                 psoUint32 & retDataLength );

   /** 
    * Iterate through the hash map.
    *
    * Data items which were added by another session and are not yet committed 
    * will not be seen by the iterator. Likewise, destroyed data items (even if
    * not yet committed) are invisible.
    *
    * Evidently, you must call psoHashMap::GetFirst to initialize the iterator. 
    * Not so evident - calling psoHashMap::Get will reset the iteration to the
    * data item retrieved by this function (they use the same internal storage). 
    * If this cause a problem, please let us know.
    *
    * Data items retrieved this way will not be sorted.
    *
    * \param[out] key The key buffer provided by the user to hold the content of
    *             the key associated with the data element. Memory allocation 
    *             for this buffer is the responsability of the caller.
    * \param[in]  keyLength The length of the \em key buffer (in bytes).
    * \param[out] buffer The buffer provided by the user to hold the content of
    *             the data element. Memory allocation for this buffer is the
    *             responsability of the caller.
    * \param[in]  bufferLength The length of \em buffer (in bytes).
    * \param[out] retKeyLength The actual number of bytes in the key
    * \param[out] retDataLength The actual number of bytes in the data item.
    *
    * \return 0 on success or PSO_REACHED_THE_END when the iteration reaches
    *           the end of the hash map.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   int GetNext( void      * key,
                psoUint32   keyLength,
                void      * buffer,
                psoUint32   bufferLength,
                psoUint32 & retKeyLength,
                psoUint32 & retDataLength );

   /**
    * Insert a data element in the hash map.
    *
    * The additions only become permanent after a call to psoSession::Commit.
    *
    * \param[in]  key The key of the item to be inserted.
    * \param[in]  keyLength The length of the \em key buffer (in bytes).
    * \param[in]  data  The data item to be inserted.
    * \param[in]  dataLength The length of \em data (in bytes).
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Insert( const void * key,
                psoUint32    keyLength,
                const void * data,
                psoUint32    dataLength );

   /** 
    * Open an existing hash map (see psoSession::CreateObject to create a new 
    * object).
    *
    * \param[in]  hashMapName The fully qualified name of the hash map. 
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Open( const std::string & hashMapName );
   
   /** 
    * Open an existing hash map (see psoSession::CreateObject to create a new 
    * object).
    *
    * \param[in]  hashMapName The fully qualified name of the hash map. 
    * \param[in]  nameLengthInBytes The length of \em hashMapName (in bytes) 
    *             not counting the null terminator.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Open( const char * hashMapName,
              psoUint32    nameLengthInBytes );
   
   /**
    * Replace a data element in the hash map.
    *
    * The replacements only become permanent after a call to psoSession::Commit.
    *
    * \param[in]  key The key of the item to be replaced.
    * \param[in]  keyLength The length of the \em key buffer (in bytes).
    * \param[in]  data  The new data item that will replace the previous data.
    * \param[in]  dataLength The length of \em data (in bytes).
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Replace( const void * key,
                 psoUint32    keyLength,
                 const void * data,
                 psoUint32    dataLength );

   /**
    * Return the status of the hash map.
    *
    * \param[out] status A reference to the status structure.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Status( psoObjStatus & status );

private:

   /// Pointer to the psoaHashMap struct.
   PSO_HANDLE m_objectHandle;

   /// Reference to the psoaSession struct (we belong to).
   PSO_HANDLE & m_sessionHandle;
   
};
 
} // End of namespace

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif // PSO_HASH_MAP_H_CPP

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

