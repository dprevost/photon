/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2008-2009 Daniel Prevost <dprevost@photonsoftware.org>
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 or version 3 as published by the 
 * Free Software Foundation and appearing in the file COPYING.GPL2 and 
 * COPYING.GPL3 included in the packaging of this software.
 *
 * Licensees holding a valid Photon Commercial license can use this file 
 * in accordance with the terms of their license.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef PSO_EXCEPTION
#define PSO_EXCEPTION

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#include <stdlib.h>
#if defined(WIN32)
#  pragma warning(disable: 4786)
#  pragma warning(disable: 4251)
#endif
#include <string>

#include <photon/psoCommon.h>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

namespace pso {

// Forward declaration
class Session;

/**
 * Exceptions thrown by the C++ API (based on the psoErrors error code).
 */
class PHOTON_EXPORT Exception
{
public:

   
   /**
    * Construct a Photon exception using the last error of the session and 
    * the name of the function throwing it.
    *
    * \param[in]  sessionHandle The handle of the current session. This 
    *             parameter can be NULL.
    * \param[in]  functionName The name of the function throwing the exception.
    */
   Exception( PSO_HANDLE   sessionHandle, 
              const char * functionName );

   /**
    * Construct a Photon exception using the return code from the C function
    * and the name of the function throwing it.
    *
    * This constructor should be used when you cannot access the saved
    * error from the session (with NULL handles, for example).
    *
    * \param[in]  functionName The name of the function throwing the exception.
    * \param[in]  theErrorCode The returned code from the C function (or 
    *             something equivalent)
    */
   Exception( const char * functionName,
              int          theErrorCode );

   virtual ~Exception();

   /**
    * Return the error message.
    *
    * \param[out]  errorMessage The error message
    *
    * \return A reference to the error message.
    */
   std::string & Message( std::string & errorMessage );

   /**
    * Return the error message.
    *
    * \return A reference to the error message.
    */
   std::string & Message();
   
   /**
    * Return the error code associated with the exception.
    *
    * \return The error code.
    */
   int ErrorCode() { return errcode; }
   
private:

   /// The error message, if any.
   std::string msg;
   
   /// The last error code seen by the API.
   int errcode;
};

} // End of namespace

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif // PSO_EXCEPTION 

