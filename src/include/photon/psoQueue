/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2007-2009 Daniel Prevost <dprevost@photonsoftware.org>
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 or version 3 as published by the 
 * Free Software Foundation and appearing in the file COPYING.GPL2 and 
 * COPYING.GPL3 included in the packaging of this software.
 *
 * Licensees holding a valid Photon Commercial license can use this file 
 * in accordance with the terms of their license.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef PSO_QUEUE_H_CPP
#define PSO_QUEUE_H_CPP

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#include <photon/psoCommon.h>
#include <string>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

namespace pso {

// Forward declarations
class Session;
class FieldDefinition;

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

/**
 * Photon FIFO queues (First In, First Out).
 */

class PHOTON_EXPORT Queue
{
public:

   Queue( Session & session );

   virtual ~Queue();

   /**
    * \brief Close a FIFO queue.
    *
    * This function terminates the current access to the queue in shared 
    * memory (the queue itself, in shared memory is untouched).
    *
    * \warning Closing an object does not automatically commit or rollback 
    * data items that were inserted or removed. You still must use either 
    * psoSession::Commit or psoSession::Rollback to end the current unit of 
    * work.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Close();
   
   /**
    * \brief Retrieve the data definition of the queue.
   *
    * This function uses the optional class ObjDefinition. This class 
    * simplify the management of the array of field definitions.
    *
    * \param[out] definition The definition of the object (accessed through
    *             the definition "helper object".
    *
    * \exception pso::Exception An abnormal error occured.
    */
//   void Definition( ObjDefinition & definition );

   /**
    * \brief Retrieve the data definition of the queue.
    *
    * You can call the function ::DefinitionLength to retrieve the 
    * length of the field definitions. This allows you to allocate 
    * the proper size for \em fields.
    *
    * \param[out] definition The definition of the object.
    * \param[in]  fields An opaque definition of the data fields of the object.
    *             It can be set to NULL if you do not want to retrieve the
    *             definition.
    * \param[in]  fieldsLength The length, in bytes, of the buffer \em fields.
    *             It should be set to zero if \em fields is NULL.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Definition( psoObjectDefinition & definition,
                    unsigned char       * fields,
                    psoUint32             fieldsLength );

   /**
    * \brief Retrieve the length of the fields definition of the queue.
    *
    * This function is a helper function for ::Definition. 
    * It allows you to allocate the proper size for \em fields.
    *
    * \param[out] fieldsLength The length in bytes of the fields buffer.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void DefinitionLength( psoUint32 * fieldsLength );

   /**
    * \brief Retrieve the field definition of the queue.
    *
    * This function returns a new object. It is the responsability of the
    * caller to delete the object.
    *
    * \return definition A new field definition of the queue.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   FieldDefinition * GetFieldDefinition();

   /** 
    * Iterate through the queue - no data items are removed from the queue
    * by this function.
    *
    * Data items which were added by another session and are not yet committed 
    * will not be seen by the iterator. Likewise, destroyed data items (even if
    * not yet committed) are invisible.
    *
    * \param[out]  buffer The buffer provided by the user to hold the content of
    *              the first element. Memory allocation for this buffer is the
    *              responsability of the caller.
    * \param[in]   bufferLength The length of \em buffer (in bytes).
    * \param[out]  returnedLength The actual number of bytes in the data item.
    *
    * \return 0 on success or PSO_IS_EMPTY if the queue is empty.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   int GetFirst( void      * buffer,
                 psoUint32   bufferLength,
                 psoUint32 & returnedLength );

   /** 
    * Iterate through the queue - no data items are removed from the queue
    * by this function.
    *
    * Data items which were added by another session and are not yet committed 
    * will not be seen by the iterator. Likewise, destroyed data items (even if
    * not yet committed) are invisible.
    *
    * Evidently, you must call ::GetFirst to initialize the iterator. 
    * Not so evident - calling ::Pop will reset the iteration to the
    * last element (they use the same internal storage). If this cause a 
    * problem, please let us know.
    *
    * \param[out]  buffer The buffer provided by the user to hold the content of
    *              the next element. Memory allocation for this buffer is the
    *              responsability of the caller.
    * \param[in]   bufferLength The length of \em buffer (in bytes).
    * \param[out]  returnedLength The actual number of bytes in the data item.
    *
    * \return 0 on success or PSO_REACHED_THE_END when the iteration reaches
    *           the end of the queue.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   int GetNext( void      * buffer,
                psoUint32   bufferLength,
                psoUint32 & returnedLength );

   /** 
    * Open an existing FIFO queue (see Session::CreateObject to create a new 
    * queue).
    *
    * \param[in]  queueName The fully qualified name of the queue. 
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Open( const std::string & queueName );

   /** 
    * Open an existing FIFO queue (see Session::CreateObject to create a new 
    * queue).
    *
    * \param[in]  queueName The fully qualified name of the queue. 
    * \param[in]  nameLengthInBytes The length of \em queueName (in bytes) not
    *             counting the null terminator.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Open( const char * queueName,
              psoUint32    nameLengthInBytes );

   /** 
    * Remove the first item from the beginning of a FIFO queue and return it 
    * to the caller.
    *
    * Data items which were added by another session and are not yet committed 
    * will not be seen by this function. Likewise, destroyed data items (even if
    * not yet committed) are invisible.
    *
    * The removals only become permanent after a call to psoSession::Commit.
    *
    * \param[out]  buffer The buffer provided by the user to hold the content of
    *              the data item. Memory allocation for this buffer is the
    *              responsability of the caller.
    * \param[in]   bufferLength The length of \em buffer (in bytes).
    * \param[out]  returnedLength The actual number of bytes in the data item.
    *
    * \return 0 on success or PSO_IS_EMPTY if the queue is empty or
    *           PSO_ITEM_IS_IN_USE if all existing items are "invisible".
    *
    * \exception pso::Exception An abnormal error occured.
    */
   int Pop( void      * buffer,
            psoUint32   bufferLength,
            psoUint32 & returnedLength );

   /**
    * Insert a data element at the end of the FIFO queue.
    *
    * The additions only become permanent after a call to psoSession::Commit.
    *
    * \param[in]  pItem  The data item to be inserted.
    * \param[in]  length The length of \em pItem (in bytes).
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Push( const void * pItem, 
              psoUint32    length );

   /**
    * Insert a data element at the end of the FIFO queue.
    *
    * The additions become permanent immediately, not after a call to 
    * psoSession::Commit (in other words, you cannot easily undo these 
    * insertions). 
    *
    * \param[in]  pItem  The data item to be inserted.
    * \param[in]  length The length of \em pItem (in bytes).
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void PushNow( const void * pItem, 
                 psoUint32    length );

   /**
    * Return the status of the queue.
    *
    * \param[out] status A reference to the status structure.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Status( psoObjStatus & status );

private:

   /// Pointer to the psoaQueue struct.
   PSO_HANDLE m_objectHandle;

   /// Reference to the psoaSession struct (we belong to).
   PSO_HANDLE & m_sessionHandle;

};

} // End of namespace

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif /* PSO_QUEUE_H_CPP */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

