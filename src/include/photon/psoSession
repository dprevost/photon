/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2007-2009 Daniel Prevost <dprevost@photonsoftware.org>
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 or version 3 as published by the 
 * Free Software Foundation and appearing in the file COPYING.GPL2 and 
 * COPYING.GPL3 included in the packaging of this software.
 *
 * Licensees holding a valid Photon Commercial license can use this file 
 * in accordance with the terms of their license.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef PSO_SESSION_H_CPP
#define PSO_SESSION_H_CPP

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#include <photon/psoCommon.h>
#include <string>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

namespace pso {

// Forward declarations
class DataDefinition;
class FieldDefinition;
class KeyDefinition;

/**
 * Sessions exist mainly to support multi-threaded (MT) programs. 
 *
 * Best practices:
 * <ul>
 *   <li>
 *     Each thread of an MT program should have its own session, making it
 *     independent of the other threads.
 *   </li>
 *
 *   <li>
 *     If you need to open the same Photon object in multiple threads,
 *     simply open it multiple times, for each thread. The overhead of 
 *     having multiple objects to the same shared-memory data container 
 *     is minimal and increases the overall performance of the framework.
 *   </li>
 *
 *   <li>
 *     Signal handlers (and similar calls): you should not call the destructors
 *     of the Process or the Session from a signal handler. 
 *     Instead, some global flags should be set that will allow each session 
 *     to terminate in an orderly fashion.
 *   </li>
 * </ul>
 *
 * If you cannot follow these guidelines for whatever reasons, you should set
 * the parameter \em protectionNeeded of Process::Init to true. This will introduce
 * additional multi-threaded protection (locking) for your applications.
 *
 * Additional note: API objects (or C handles) are just proxies for the real 
 * objects sitting in shared memory. Proper synchronization is already done 
 * in shared memory and it is best to avoid the additional synchronization 
 * of these proxy objects.
 */
class PHOTON_EXPORT Session
{
public:
   
   Session();

   /**
    * Terminate the current session and destroy this object.
    *
    * An implicit call to ::Rollback is executed by this destructor.
    */
   virtual ~Session();
   
   /**
    * Commit all insertions and deletions (of the current session) executed 
    * since the previous call to Commit or Rollback.
    *
    * Insertions and deletions subjected to this call include both data items
    * inserted and deleted from data containers (maps, etc.) and objects 
    * themselves created with ::CreateObject and/or destroyed with 
    * ::DestroyObject.
    *
    * Note: the internal calls executed by the engine to satisfy this request
    * cannot fail. As such, you cannot find yourself with an ugly situation 
    * where some operations were committed and others not. If this function 
    * thows an exception, nothing was committed.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Commit();
   
   /**
    * Create a new folder in shared memory.
    *
    * The creation of the folder only becomes permanent after a call to 
    * ::Commit.
    *
    * \param[in] folderName The fully qualified name of the object. 
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void CreateFolder( const std::string & folderName );

   /**
    * Create a new object in shared memory.
    *
    * This overloaded method should be used for objects not requiring
    * a key definition (queues, etc.).
    *
    * The creation of the object only becomes permanent after a call to 
    * ::Commit.
    *
    * \param[in] objectName The fully qualified name of the object. 
    * \param[in] definition The type of object to create and more.
    * \param[in] dataDef The definition of the data fields of the object.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void CreateObject( const std::string   & objectName,
                      psoObjectDefinition & definition,
                      DataDefinition      & dataDef );

   /**
    * Create a new object in shared memory.
    *
    * This overloaded method should be used for objects not requiring
    * a key definition (queues, etc.).
    *
    * The creation of the object only becomes permanent after a call to 
    * ::Commit.
    *
    * \param[in] objectName  The fully qualified name of the object. 
    * \param[in] definition  The type of object to create and more.
    * \param[in] dataDefName The name of an existing data definition for
    *                        the data fields of the object.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void CreateObject( const std::string   & objectName,
                      psoObjectDefinition & definition,
                      const std::string   & dataDefName );

   /**
    * Create a new object in shared memory.
    *
    * This overloaded method should be used for objects requiring
    * a key definition (hash maps, etc.).
    *
    * The creation of the object only becomes permanent after a call to 
    * ::Commit.
    *
    * \param[in] objectName The fully qualified name of the object. 
    * \param[in] definition The type of object to create (folder, queue, etc.),
    *            the type of field definition, etc.
    * \param[in] keyDef The definition of the key of the object.
    * \param[in] dataDef The definition of the data fields of the object.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void CreateObject( const std::string   & objectName,
                      psoObjectDefinition & definition,
                      KeyDefinition       & keyDef,
                      DataDefinition      & dataDef );
   
   /**
    * Create a new object in shared memory.
    *
    * This overloaded method should be used for objects requiring
    * a key definition (hash maps, etc.).
    *
    * The creation of the object only becomes permanent after a call to 
    * ::Commit.
    *
    * \param[in] objectName The fully qualified name of the object. 
    * \param[in] definition The type of object to create (folder, queue, etc.),
    *            the type of field definition, etc.
    * \param[in] keyDefName  The name of the definition of the key of 
    *                        the object.
    * \param[in] dataDefName The name of the data definition for
    *                        the data fields of the object.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void CreateObject( const std::string   & objectName,
                      psoObjectDefinition & definition,
                      const std::string   & keyDefName,
                      const std::string   & dataDefName );
   
   /**
    * Destroy an existing object in shared memory.
    *
    * The destruction of the object only becomes permanent after a call to 
    * ::Commit.
    *
    * \param[in]  objectName The fully qualified name of the object. 
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void DestroyObject( const std::string & objectName );

   /**
    * Return the error message associated with the last error(s).
    *
    * Caveat, some basic errors cannot be captured, if the provided handles
    * (session handles or object handles) are incorrect (NULL, for example).
    * Without a proper handle, the code cannot know where to store
    * the error...
    *
    * \param[out]  message Buffer for the error message. Memory allocation for 
    *              this buffer is the responsability of the caller.
    *
    * \exception pso::Exception An abnormal error occured.
    */   
   std::string & ErrorMsg( std::string & message );

   /**
    * Return the error message associated with the last error(s).
    *
    * If the length of the error message is greater than the length of the
    * provided buffer, the error message will be truncated to fit in the
    * provided buffer.
    *
    * Caveat, some basic errors cannot be captured, if the provided handles
    * (session handles or object handles) are incorrect (NULL, for example).
    * Without a proper handle, the code cannot know where to store
    * the error...
    *
    * \param[out]  message Buffer for the error message. Memory allocation for 
    *              this buffer is the responsability of the caller.
    * \param[in]   msgLengthInBytes The length of \em message (in bytes). Must
    *              be at least 32 bytes.
    *
    * \exception pso::Exception An abnormal error occured.
    */   
   void ErrorMsg( char      * message,
                  psoUint32   msgLengthInBytes );

   /**
    * \brief Retrieve the basic definition of the named object.
    *
    * \param[in]  objectName The fully qualified name of the object. 
    * \param[out] definition The definition of the object 
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void GetDefinition( const std::string    & objectName,
                       psoObjectDefinition  & definition );
   
   /**
    * \brief Retrieve the data definition of the named object.
    *
    * This function may return a new object. It is the responsability of
    * the caller to delete the object.
    *
    * \param[in]  objectName The fully qualified name of the object. 
    *
    * \return A new DataDefinition object or NULL if the object is
    *         a Folder.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   DataDefinition * GetDataDefinition( const std::string & objectName );
   
   /**
    * \brief Retrieve the key definition of the named object.
    *
    * This function may return a new object. It is the responsability of
    * the caller to delete the object.
    *
    * \param[in]  objectName The fully qualified name of the object. 
    * 
    * \return A new KeyDefinition object or NULL if the object does not
    *         have a key definition (Folders, Queues, etc.).
    *
    * \exception pso::Exception An abnormal error occured.
    */
   KeyDefinition * GetKeyDefinition( const std::string & objectName );

   /**
    * Return information on the current status of the shared memory.
    *
    * The fetched information is mainly about the current status of the memory 
    * allocator.
    *
    * \param[out] info A reference to the ::psoInfo structure.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void GetInfo( psoInfo & info );

   /**
    * Return the status of the named object.
    *
    * \param[in]  objectName The fully qualified name of the object. 
    * \param[out] status A reference to the psoObjStatus structure.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void GetStatus( const std::string & objectName,
                   psoObjStatus      & status );

   /**
    * This function initializes a session. 
    * 
    * This function will also initiate a new transaction.
    *
    * Upon normal termination, the current transaction is rolled back. You
    * MUST explicitly call Commit to save your changes.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Init();
   
   /**
    * Return the last error seen in previous calls (of the current session).
    *
    * \exception pso::Exception An abnormal error occured.
    */
   int LastError();

   /**
    * Rollback all insertions and deletions (of the current session) executed 
    * since the previous call to Commit or Rollback.
    *
    * Insertions and deletions subjected to this call include both data items
    * inserted and deleted from data containers (maps, etc.) and objects 
    * themselves created with ::CreateObject and/or destroyed with 
    * ::DestroyObject.
    *
    * Note: the internal calls executed by the engine to satisfy this request
    * cannot fail. As such, you cannot find yourself with an ugly situation 
    * where some operations were rollbacked and others not. If this function 
    * thows an exception, nothing was rollbacked.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Rollback();
   
private:

   /// Pointer to the psoaSession struct
   PSO_HANDLE m_sessionHandle;
   
   friend class DataDefinition;
   friend class FastMap;
   friend class FastMapEditor;
   friend class Folder;
   friend class HashMap;
   friend class KeyDefinition;
   friend class Lifo;
   friend class Queue;
};

} // End of namespace

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif /* PSO_SESSION_H_CPP */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

