/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2007-2008 Daniel Prevost <dprevost@photonsoftware.org>
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 as published by the Free Software
 * Foundation and appearing in the file COPYING included in the
 * packaging of this library.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef PSO_PROCESS
#define PSO_PROCESS

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#include <stdlib.h>
#include <photon/psoCommon.h>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

namespace pso {

class PHOTON_EXPORT Process
{
public:

   Process();
   
   /**
    * This function initializes access to the shared-memory of Photon.
    * It takes 2 input arguments, the address of Quasar, the Photon server,
    * and a boolean value.
    *
    * This last argument indicates if sessions and 
    * other objects (Queues, etc) are shared amongst threads (in the 
    * current process) and must be protected. Recommendation: always 
    * set protectionNeeded to false unless you cannot do otherwise (for
    * example if you need to call the destructor of the Process object
    * in asignal handler).
    *
    * In other words it is recommended to use one session object for
    * each thread. If the same queue (or map or...) needs to be accessed by 
    * more than one thread it is more efficient to have multiple API
    * objects pointing to the same shared-memory object instead
    * of sharing a single one.
    * 
    * [Additional note: API objects (or C handles) are just proxies for 
    * the real objects sitting in shared memory. Proper synchronization 
    * is already done in shared memory and it is best to avoid to 
    * synchronize these proxy objects.]
    * 
    * \param[in] quasarAddress The address of Quasar. Currently a string with 
    *            the port number ("12345").
    * \param[in] protectionNeeded A boolean value indicating if additional 
    *            multi-threaded locks are needed or not.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Init( const char * quasarAddress,
              bool         protectionNeeded = false );

   /**
    * The destructor terminates all access to shared memory. This function 
    * will also close all sessions and terminate all accesses to 
    * the different objects.
    */
   virtual ~Process();

};

} // End of namespace

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif /* PSO_PROCESS */

