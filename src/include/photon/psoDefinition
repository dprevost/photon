/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2008-2009 Daniel Prevost <dprevost@photonsoftware.org>
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 or version 3 as published by the 
 * Free Software Foundation and appearing in the file COPYING.GPL2 and 
 * COPYING.GPL3 included in the packaging of this software.
 *
 * Licensees holding a valid Photon Commercial license can use this file 
 * in accordance with the terms of their license.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef PSO_DEFINITION
#define PSO_DEFINITION

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#include <stdlib.h>
#if defined(WIN32)
#  pragma warning(disable: 4786)
#  pragma warning(disable: 4251)
#endif
#include <string>

#include <photon/psoCommon.h>
#include <photon/psoPhotonODBC.h>

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

namespace pso {

/** 
 * This class is a wrapper for the C struct psoObjectDefinition.
 *
 * It's main pupose is to encapsulate the memory management of the C struct.
 */
class PHOTON_EXPORT ObjDefinition
{
protected:

   /**
    * Construct a data-container definition.
    *
    * This constructor is useful to query existing definitions but the
    * new object cannot be used to create new data containers (without 
    * calling ::Reset() - which is equivalent to the other constructor).
    *
    * \param[in] serializedKeyDef The serialized key definition as an 
    *            array of bytes. This parameter can be NULL if the object
    *            has no key.
    * \param[in] keyDefLength The length in bytes of serializedKeyDef. 
    *            Should be set to zero if serializedKeyDef is NULL.
    * \param[in] serializedFieldDef The serialized definition of the data
    *            fields as an array of bytes. It cannot be NULL.
    * \param[in] fieldDefLength The length in bytes of serializedFieldDef.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   ObjDefinition( unsigned char * serializedKeyDef,
                  psoUint32       keydefLength,
                  unsigned char * serializedFieldDef,
                  psoUint32       fieldDefLength );

   /**
    * Construct a data-container definition.
    *
    * \param[in] numberOfFields The number of data fields.
    * \param[in] type The type of the object.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   ObjDefinition( psoUint32 numberOfFields, enum psoObjectType type );

public:
   
   virtual ~ObjDefinition();

   /**
    * Add a key to the definition.
    *
    * \param[in]  type The data type of the key. 
    * \param[in]  length The length of the key for fixed-length data types.
    * \param[in]  minLength The minimal length of the key for 
    *             variable-length data types.
    * \param[in]  maxLength The maximal length of the key for 
    *             variable-length data types. A value of zero indicates an
    *             infinite value (limited by the amount of shared memory, 
    *             evidently).
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void AddKey( psoKeyType type,
                psoUint32  length,
                psoUint32  minLength,
                psoUint32  maxLength );

   /**
    * Add a field to the definition. Fields must be added in order.
    *
    * \param[in]  name The name of the field
    * \param[in]  type The data type of the field. 
    * \param[in]  length The length of the field for fixed-length data types.
    * \param[in]  minLength The minimal length of the field for 
    *             variable-length data types.
    * \param[in]  maxLength The maximal length of the field for 
    *             variable-length data types. A value of zero indicates an
    *             infinite value (limited by the amount of shared memory, 
    *             evidently).
    * \param[in]  precision The number of digits of a decimal field (not 
    *             counting the separator or the sign).
    * \param[in]  scale The number of digits after the separator of a decimal
    *             field.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void AddField( std::string  & name,
                  psoFieldType   type,
                  psoUint32      length,
                  psoUint32      minLength,
                  psoUint32      maxLength,
                  psoUint32      precision,
                  psoUint32      scale );

   /**
    * Add a field to the definition. Fields must be added in order.
    *
    * \param[in]  name The name of the field
    * \param[in]  nameLength The length of the name (in bytes).
    * \param[in]  type The data type of the field. 
    * \param[in]  length The length of the field for fixed-length data types.
    * \param[in]  minLength The minimal length of the field for 
    *             variable-length data types.
    * \param[in]  maxLength The maximal length of the field for 
    *             variable-length data types. A value of zero indicates an
    *             infinite value (limited by the amount of shared memory, 
    *             evidently).
    * \param[in]  precision The number of digits of a decimal field (not 
    *             counting the separator or the sign).
    * \param[in]  scale The number of digits after the separator of a decimal
    *             field.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void AddField( const char   * name,
                  psoUint32      nameLength,
                  psoFieldType   type,
                  psoUint32      length,
                  psoUint32      minLength,
                  psoUint32      maxLength,
                  psoUint32      precision,
                  psoUint32      scale );

   /**
    * Set the type of the object.
    *
    * \param[in]  type The type of the object.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void ObjectType( enum psoObjectType type );

   /**
    * Retrieve the type of the object.
    *
    * \return The type of the object.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   enum psoObjectType ObjectType();
     
   /**
    * Reset the object to be reused for the definition of another data 
    * container.
    *
    * \param[in] numberOfFields The number of data fields of the new data
    *            container.
    * \param[in] type The type of the object.
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Reset( psoUint32 numberOfFields, enum psoObjectType type );

   /**
    * Reset the object to be reused for the definition of another data 
    * container.
    *
    * This version of reset is used internally by the C++ API to populate
    * the C++ class from the C structs.
    *
    * \param[in] definition The object definition C struct
    * \param[in] inputKey   The key definition. Set it to NULL for objects
    *                       not using keys (FIFO Queues, etc.).
    * \param[in] inputFields The field definition array
    *
    * \exception pso::Exception An abnormal error occured.
    */
   void Reset( psoObjectDefinition & definition,
               psoKeyDefinition    * inputKey,
               psoFieldDefinition  * inputFields );
   
   /** Returns a reference to the C struct definition. */
   const psoObjectDefinition & GetDef();

   /** Returns a reference to the C struct definition. */
   const psoFieldDefinition * GetFields();

   /** Returns a reference to the C struct definition. */
   const psoKeyDefinition & GetKey();

private:

   /// The C struct holding the definition itself
   psoObjectDefinition definition;

   psoKeyDefinition key;

   /// The C struct array holding the definition of the fields
   psoFieldDefinition * fields;
   
   /// Iterator
   psoUint32 currentField;
   
   /// was the key added?
   bool keyAdded;
   
   unsigned char * serializedKeyDef;
   psoUint32       keydefLength;
   unsigned char * serializedFieldDef;
   psoUint32       fieldDefLength;

};

} // End of namespace

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif // PSO_DEFINITION

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

