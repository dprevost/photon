/* -*- c++ -*- */
/* :mode=c++:  - For jedit, previous line for emacs */
/*
 * Copyright (C) 2008 Daniel Prevost <dprevost@photonsoftware.org>
 *
 * This file is part of Photon (photonsoftware.org).
 *
 * This file may be distributed and/or modified under the terms of the
 * GNU General Public License version 2 as published by the Free Software
 * Foundation and appearing in the file COPYING included in the
 * packaging of this library.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 */

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#ifndef PSO_DEFINITION
#define PSO_DEFINITION

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#include <stdlib.h>
#if defined(WIN32)
#  pragma warning(disable: 4786)
#  pragma warning(disable: 4251)
#endif
#include <string>

#include <photon/psoCommon.h>

// Forward declaration
class psoSession;

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

class PHOTON_EXPORT psoDefinition
{
public:

   /// Construct a data-container definition
   psoDefinition( size_t numberOfFields );
   
   virtual ~psoDefinition();

   /**
    * Add a key to the definition.
    *
    * \param[in]  type The data type of the key. 
    * \param[in]  length The length of the key for fixed-length data types.
    * \param[in]  minLength The minimal length of the key for 
    *             variable-length data types.
    * \param[in]  maxLength The maximal length of the key for 
    *             variable-length data types. A value of zero indicates an
    *             infinite value (limited by the amount of shared memory, 
    *             evidently).
    *
    * \exception psoException An abnormal error occured.
    */
   void AddKey( psoKeyType type,
                size_t     length,
                size_t     minLength,
                size_t     maxLength );
   
   void AddField( std::string  & name,
                  psoFieldType   type,
                  size_t         length,
                  size_t         minLength,
                  size_t         maxLength,
                  size_t         precision,
                  size_t         scale );
   
   void ObjectType( psoObjectType type );
   
   /// Reset the object to be reused for another data container
   void Reset( size_t numberOfFields );
   
   /// Returns a reference to the definition 
   const psoObjectDefinition & GetDef();
   
private:

   /// The definition itself
   psoObjectDefinition * pDefinition;
   
   /// Iterator
   size_t currentField;
   
   /// was the key added?
   bool keyAdded;
};

// --+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--

#endif // PSO_DEFINITION

